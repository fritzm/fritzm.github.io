<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>fritzm.github.io</title><link href="http://fritzm.github.io/" rel="alternate"></link><link href="http://fritzm.github.io/feeds/math.atom.xml" rel="self"></link><id>http://fritzm.github.io/</id><updated>2014-12-01T12:45:00-08:00</updated><entry><title>Moebious transformation animated GIFs</title><link href="http://fritzm.github.io/moebius.html" rel="alternate"></link><published>2014-12-01T12:45:00-08:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2014-12-01:moebius.html</id><summary type="html">&lt;p&gt;Here are some animated GIFs that I created a few years ago with MATLAB.  These characterize the action of the four classes of Moebius transformations, mapping the complex plane to itself.  They were inspired by the illustrations and analysis in a section of Tristan Needham's excellent book &lt;a href="http://books.google.com/books?vid=ISBN0198534469"&gt;&lt;em&gt;Visual Complex Analysis&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;figure&gt;&lt;img src="/images/moebius/elliptic.gif"&gt;&lt;figcaption&gt;elliptic&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;img src="/images/moebius/hyperbolic.gif"&gt;&lt;figcaption&gt;hyperbolic&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;img src="/images/moebius/loxodromic.gif"&gt;&lt;figcaption&gt;loxodromic&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;img src="/images/moebius/parabolic.gif"&gt;&lt;figcaption&gt;parabolic&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;So what's it all about?  A Moebius transformation is a mapping on the complex numbers of the form &lt;/p&gt;
&lt;div class="math"&gt;$$ M(z) = \frac{az + b}{cz + d}, $$&lt;/div&gt;
&lt;p&gt; where &lt;span class="math"&gt;\(a, b, c, d\)&lt;/span&gt; are complex constants.  Moebius tranformations have many nice features: they are one-to-one and onto on the complex plane (extended with the addition of the "point at &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;"), they form a group under composition, they are conformal (angle preserving).  Interestingly, though conformality only implies that they map infinitesimal circles to other infinitesimal circles, Moebius transformations actually map circles of &lt;em&gt;any&lt;/em&gt; size in the complex plane to other circles in the plane.  For a really nice exposition and proofs of these qualities, see Needham.&lt;/p&gt;
&lt;p&gt;Fixed points on the plane under a Moebius transform will simply be solutions of &lt;/p&gt;
&lt;div class="math"&gt;$$ z = \frac{az+b}{cz+d}, $$&lt;/div&gt;
&lt;p&gt; which is just quadratic in &lt;span class="math"&gt;\(z\)&lt;/span&gt;.  So a (non-identity) Moebius transform will have at most two fixed points, or one when there is a repeated root.  Following Needham, for the remainder of this discussion we'll refer to the fixed points of a given Moebius transformation as &lt;span class="math"&gt;\(\xi_+\)&lt;/span&gt;, &lt;span class="math"&gt;\(\xi_-\)&lt;/span&gt; in the two root case, or just &lt;span class="math"&gt;\(\xi\)&lt;/span&gt; in the repeated root case.&lt;/p&gt;
&lt;p&gt;Most of the qualities above are readily observable in the animations: one or two fixed points, circles mapping to circles, one-to-one, easy to imagine extension to the whole plane.  Conformality is a little harder to see, but if you look closely you can see that the angles at each of the corners in these crazed checkerboards always remain 90°.&lt;/p&gt;
&lt;p&gt;The GIFs were generated using a transform method.  Given a Moebius transformation with two fixed points (we will revisit the single fixed point case shortly), consider the additional Moebius transformation defined by &lt;/p&gt;
&lt;div class="math"&gt;$$ F(z) =  \frac{z - \xi_+}{z - \xi_-}. $$&lt;/div&gt;
&lt;p&gt; This will send &lt;span class="math"&gt;\(\xi_+\)&lt;/span&gt; to &lt;span class="math"&gt;\(0\)&lt;/span&gt;, and  &lt;span class="math"&gt;\(\xi_-\)&lt;/span&gt; to &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;.  We can now construct &lt;/p&gt;
&lt;div class="math"&gt;$$ \widetilde{M} = F \circ  M \circ F^{-1}, $$&lt;/div&gt;
&lt;p&gt; which is itself a Moebius transformation (since the  Moebius transformations are a group under composition) and which will  have fixed points at &lt;span class="math"&gt;\(0\)&lt;/span&gt; and &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;.  We can consider &lt;span class="math"&gt;\(M\)&lt;/span&gt; and &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; to be a transform pair; for any &lt;span class="math"&gt;\(M\)&lt;/span&gt; there is a corresponding &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; with fixed points at &lt;span class="math"&gt;\(0\)&lt;/span&gt; and &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Now it turns out that Moebius transformations with fixed points at both &lt;span class="math"&gt;\(0\)&lt;/span&gt; and &lt;span class="math"&gt;\(\infty\)&lt;/span&gt; reduce to a particularly simple form — that of a single complex multiplication, i.e. just a dilation and/or rotation about the origin of the complex plane.  See Needham for exposition of this.  The elliptic, hyperbolic, and loxodromic classes of Moebius transformations turn out to be those whose corresponding &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; is a pure rotation, pure dilation, or general combination of the two, respectively.&lt;/p&gt;
&lt;p&gt;To generate these GIFs, we decorate the complex plane on the &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; side like a circular checkerboard or dart board, and represent the action of a given class of &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; transformations by rotating it, dilating it, or a combination of both, e.g.:&lt;/p&gt;
&lt;figure&gt;&lt;img src="/images/moebius/pre-elliptic.gif"&gt;&lt;figcaption&gt;elliptic \(\widetilde{M}\)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;img src="/images/moebius/pre-hyperbolic.gif"&gt;&lt;figcaption&gt;hyperbolic \(\widetilde{M}\)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;On the &lt;span class="math"&gt;\(M\)&lt;/span&gt; side, we can pick fixed points &lt;span class="math"&gt;\(\xi_+\)&lt;/span&gt;, &lt;span class="math"&gt;\(\xi_-\)&lt;/span&gt; wherever we like, and then derive the corresponding &lt;span class="math"&gt;\(F\)&lt;/span&gt; as above.  For each frame, we take each point on the &lt;span class="math"&gt;\(M\)&lt;/span&gt; side, map it through &lt;span class="math"&gt;\(F\)&lt;/span&gt; to find the corresponding point on the &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; side, and check that against a dynamic checkerboard model to see if the point should be black or white in this frame.&lt;/p&gt;
&lt;p&gt;Returning to the repeated root, single fixed point case: we treat this similarly, but set &lt;/p&gt;
&lt;div class="math"&gt;$$ F = \frac{1}{z - \xi}, $$&lt;/div&gt;
&lt;p&gt; which sends &lt;span class="math"&gt;\(\xi\)&lt;/span&gt; to &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;.  As before, it turns out that Moebius transformations of this form (repeated fixed point at &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;) reduce to a very simple form: this time, a pure translation.  The parabolic class of Moebius transformations are those whose corresponding &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; transformation is a pure translation.  To illustrate these, we use a translating dynamic checkerboard on the &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; side that looks like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src="/images/moebius/pre-parabolic.gif"&gt;&lt;figcaption&gt;parabolic \(\widetilde{M}\)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;All of this can be done quite succinctly in MATLAB, once it is understood what needs to be done.  Below is the MATLAB snippet which was used to generate these GIFs.  Commenting and uncommenting various lines chooses different &lt;span class="math"&gt;\(F\)&lt;/span&gt; and &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; side checkerboard models, resulting in the different outputs.&lt;/p&gt;
&lt;p&gt;The first few lines create a 512x512 matrix of complex numbers, ranging from -3 to 3 on both the real and imaginary axes, to represent a portion of the complex plane.  This is then pre-mapped through an appropriate &lt;span class="math"&gt;\(F\)&lt;/span&gt;.  The &lt;code&gt;for&lt;/code&gt; loop iterates on each frame.  The dynamic checkerboard result is calculated as the &lt;code&gt;xor&lt;/code&gt; of various versions of functions &lt;code&gt;g1&lt;/code&gt; and &lt;code&gt;g2&lt;/code&gt; operating over the premapped points.  Each frame is downsampled and written to disk as a separate file, then at the end all the frames are stitched into a movie.  I must then have used some non-matlab utility to convert the movies to animated GIFs, but I'm not sure what that was...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;)),:);&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c"&gt;%Z = 1 ./ Z;        % one finite fixed point&lt;/span&gt;
&lt;span class="n"&gt;Z&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c"&gt;% two finite fixed points&lt;/span&gt;

&lt;span class="n"&gt;im&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="n"&gt;g1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="n"&gt;g2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="n"&gt;g1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="c"&gt;% radial, static&lt;/span&gt;
&lt;span class="c"&gt;%    g1 = mod(log(abs(Z))*4+(frame-1)/15,2)&amp;lt;1; % radial, dynamic&lt;/span&gt;
&lt;span class="c"&gt;%    g1 = mod(real(Z)+(frame-1)*.8/30,.8)&amp;lt;.4;  % vertical, dynamic&lt;/span&gt;
&lt;span class="c"&gt;%    g2 = mod(angle(Z), pi/6)&amp;lt;(pi/12);         % circumferential, static&lt;/span&gt;
    &lt;span class="n"&gt;g2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;% circumferential, dynamic&lt;/span&gt;
&lt;span class="c"&gt;%    g2 = mod(imag(Z),.8)&amp;lt;.4;                  % horizontal, static&lt;/span&gt;
    &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;(:,:,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imresize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;g2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bilinear&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;imwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;(:,:,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;frame%.2d.bmp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;immovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mov&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="complex analysis"></category><category term="MATLAB"></category><category term="Moebius transformations"></category><category term="Visual Complex Analysis"></category></entry></feed>