<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>fritzm.github.io</title><link href="http://fritzm.github.io/" rel="alternate"></link><link href="http://fritzm.github.io/feeds/all.atom.xml" rel="self"></link><id>http://fritzm.github.io/</id><updated>2016-07-03T00:00:00-07:00</updated><entry><title>PDP-11/45: Diagnostics with PDP11GUI</title><link href="http://fritzm.github.io/diagnostics.html" rel="alternate"></link><published>2016-07-03T00:00:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-07-03:diagnostics.html</id><summary type="html">&lt;p&gt;Okay, now that serial is straightened out, on to running diagnostic tests via PDP11GUI.  PDP11GUI itself, as well as
a thorough and useful database of DEC diagnostic programs, are available at &lt;a href="http://www.retrocmp.com/tools"&gt;http://www.retrocmp.com/tools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since my home computer is a MacBook, I had intended to run PDP11GUI under Wine.  I ran into a problem with this where
PDP11GUI under Wine could not generate its pre-processed machine description temp file, seemingly because of some
incompatible behavior wrt. multiple backslashes in pathnames.  Rather than fight with this too long, I just sprang for
a Windows 10 license and installed a Windows 10 VM; it will come in handy for other Windows-only tools that have
been tweaky to use under Wine as well.&lt;/p&gt;
&lt;p&gt;With PDP11GUI up and running under Windows, results of the initial set of 11/45 CPU diagnostics were very encouraging!
In summary:&lt;/p&gt;
&lt;style&gt;
.diaglist { display: inline; border-collapse: collapse; margin-right: 1em; }
.diaglist caption { font-weight: bold; }
.diaglist tr:nth-child(even) { background-color: #f2f2f2; }
.diaglist th, .diaglist td { padding: 5px; }
.diaglist td { border: 1px solid lightgray; font-family: "Courier", monospace; }
&lt;/style&gt;

&lt;table class="diaglist"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Diagnostic&lt;/th&gt;&lt;th&gt;BEL&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Status&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;CKBAB0.BIC&lt;/td&gt;&lt;td&gt;002562&lt;/td&gt;&lt;td&gt;SXT instruction&lt;/td&gt;&lt;td&gt;pass&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CKBBB0.BIC&lt;/td&gt;&lt;td&gt;003604&lt;/td&gt;&lt;td&gt;SOB instruction&lt;/td&gt;&lt;td&gt;pass&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CKBCB0.BIC&lt;/td&gt;&lt;td&gt;007410&lt;/td&gt;&lt;td&gt;XOR instruction&lt;/td&gt;&lt;td&gt;pass&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CKBDC0.BIC&lt;/td&gt;&lt;td&gt;007262&lt;/td&gt;&lt;td&gt;MARK instruction&lt;/td&gt;&lt;td&gt;pass&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CKBEC0.BIC&lt;/td&gt;&lt;td&gt;002212&lt;/td&gt;&lt;td&gt;RTI/RTT instructions&lt;/td&gt;&lt;td&gt;pass&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CKBFD0.BIC&lt;/td&gt;&lt;td&gt;002272&lt;/td&gt;&lt;td&gt;stack limit&lt;/td&gt;&lt;td&gt;pass&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CKBGB0.BIC&lt;/td&gt;&lt;td&gt;001446&lt;/td&gt;&lt;td&gt;SPL instruction&lt;/td&gt;&lt;td&gt;halt 001404&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CKBHB0.BIC&lt;/td&gt;&lt;td&gt;003762&lt;/td&gt;&lt;td&gt;11/45 registers&lt;/td&gt;&lt;td&gt;pass&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CKBIB0.BIC&lt;/td&gt;&lt;td&gt;013746&lt;/td&gt;&lt;td&gt;ASH instruction&lt;/td&gt;&lt;td&gt;pass&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CKBJA0.BIC&lt;/td&gt;&lt;td&gt;014722&lt;/td&gt;&lt;td&gt;ASHC instruction&lt;/td&gt;&lt;td&gt;pass&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CKBKA0.BIC&lt;/td&gt;&lt;td&gt;014430&lt;/td&gt;&lt;td&gt;MUL instruction&lt;/td&gt;&lt;td&gt;pass&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CKBLA0.BIC&lt;/td&gt;&lt;td&gt;011574&lt;/td&gt;&lt;td&gt;DIV instruction&lt;/td&gt;&lt;td&gt;pass&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CKBME0.BIC&lt;/td&gt;&lt;td&gt;016000&lt;/td&gt;&lt;td&gt;11/45 traps&lt;/td&gt;&lt;td&gt;halt 005320&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CKBNC0.BIC&lt;/td&gt;&lt;td&gt;004702&lt;/td&gt;&lt;td&gt;PIRQ instruction&lt;/td&gt;&lt;td&gt;pass&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CKBOA0.BIC&lt;/td&gt;&lt;td&gt;013640&lt;/td&gt;&lt;td&gt;11/45 states&lt;/td&gt;&lt;td&gt;halt 000610&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Note that these tests are written to output an ASCII BEL to the console on each successful pass.  The terminal
built in to PDP11GUI doesn't sound when given a BEL, however, so it is convenient to patch the BEL literal in the
programs to a visible character (e.g. 000052, ASCII '*') before running them.  This may be done in the memory loader
window in PDP11GUI after "Load" but before "Deposit all".  The patch address I identified for each diagnostic is
listed in the table above as well for convenience.&lt;/p&gt;
&lt;p&gt;So, out of this initial set of tests, only three halts to investigate.  I'll be posting more information here as I look
further into these.&lt;/p&gt;
&lt;p&gt;Regarding the backplane SPC issue discussed in the previous post: Marty from the vcfed.org forum did some investigation
of his 11/45, and reports that he does have +15V (actually +12V on his system) distributed to pin CU1 on slots
26-28.  It seems to be wired over from slot 15 on his system, but it is not clear whether this was a factory wire,
an ECO, or a user mod.&lt;/p&gt;
&lt;p&gt;Marty's 11/45 also has no power distributed to CA1 on this slots, so it's really looking to me like the reference
to that on page 5-10 of the 11/45 maintenance manual is a misprint.  Thanks to Marty for checking all this out!  I'd be
curious to hear from any other 11/45 owners out there regarding wiring of CU1 and CA1 on slots 26-28 in their systems.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/pdp11gui.jpg"&gt;&lt;img src='/images/pdp11/pdp11gui_thumbnail_tall.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: Serial console and backplane SPC slots</title><link href="http://fritzm.github.io/serial-console.html" rel="alternate"></link><published>2016-06-26T00:00:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-06-26:serial-console.html</id><summary type="html">&lt;p&gt;Hit a snag on the way to getting PDP11GUI hooked up: while the M9301 console emulator was working fine with the VT52,
I could not get serial communication to my laptop (MacBook Pro + Keyspan USA-19HS USB serial) to work as expected.  Some
detective work showed that the voltages from the EIA output drivers on the DL11 were way out of whack (+3V for mark,
which should have been a negative voltage).  Somehow the VT52 was able to still make sense out of this signaling,
though the laptop was not.&lt;/p&gt;
&lt;p&gt;Some investigation of power to the DL11, which was sitting in one of the backplane SPC slots (26-28), showed that there
was no distribution of +15V to pin CU1 of these slots where the DL11 was expecting it.  So that explained the bad
driver output voltages.  Moved the DL11 over to the DD11 expansion backplane which does have +15V to that pin, and
serial to/from the laptop started working fine.&lt;/p&gt;
&lt;p&gt;So this raises a bit of a question about the SPC slots on the 11/45 backplane.  Was EIA console serial from these slots
ever supported?  The configurations listed in the 11/45 engineering prints call out only DL11-A, the 20mA current
loop version, which doesn't have EIA drivers and thus doesn't need the +15V supply, so maybe not.  Was +15V distribution
perhaps added to these slots in subsequent revisions or via an ECO?  I'd like to track down a wire list for this or
later revision 11/45 backplanes, and/or a comprehensive list of KB11-A ECOs, but so far haven't seen traces of either
anywhere out there.&lt;/p&gt;
&lt;p&gt;One other curiosity of these SPC slots that came up while investigating this: the power distribution table in
the 11/45 maintenance manual, EK-11045-MM-007, page 5-10, implies that +15V should be distributed to the SPC slots on
CA1.  This is suspicious to me (maybe a typo?) because all other SPC pinouts that I have seen use this pin and CB1
as NPR in/out.  And in checking my backplane, there is no power distribution to those pins.  But slots 27 and 28
(Unibus B) do have their CA1 pins bridged to one another, and their CB1 pins bridged to one another, with what look like
factory installed wire wraps.  This also seems unusual for NPR/NPG.  So, some mysteries remain about these slots...&lt;/p&gt;
&lt;p&gt;In other news, the clock oscillator on the VT52 has given out, so that's down now until I can find a replacement.  They
are out of production and aren't easy to track down, but I do have one lead to follow so far.&lt;/p&gt;
&lt;p&gt;Also, I pulled the suspected failed subsidiary ALU control ROM, tested it in isolation, and verified that it had indeed
failed.  This card is just a spare for me, but I'd like to go ahead and repair it since the fault is isolated.  With
some help from the classiccmp mailing list (thanks guys!) I have a recommendation for some vintage PROM programmers to
stalk on eBay, and some compatible parts, that would allow me to blow a replacement and make the repair.&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: Running the M9301 console emulator</title><link href="http://fritzm.github.io/m9301-running.html" rel="alternate"></link><published>2016-06-23T00:00:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-06-23:m9301-running.html</id><summary type="html">&lt;p&gt;Replacement DRAMs showed up.  Pulled and replaced the two faulty ones on the MS11.  Pic below -- you can see the
replacements are socketed, and are the TI parts instead of the original ITT.  Full address space is working now!  Now
that bank 0 is repaired, trap vectors can conceivably work.&lt;/p&gt;
&lt;p&gt;Jumpered and configured a DL11-E serial card for use as console, slotted in an M9301-YB bootstrap terminator, connected
up the VT52, powered up, and off it goes straight to the console emulator!  That means the basic instruction set tests
in the boot ROM are passing as well, which is great news.&lt;/p&gt;
&lt;p&gt;Next step will be to hook up PDP11GUI and load some more in-depth diagnostics, in order to shake out any
remaining bugs with the CPU and memory system.  Will slot in the FPU at that point for testing and debug as well.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/ms11-repaired.jpg"&gt;&lt;img src='/images/pdp11/ms11-repaired_thumbnail_tall.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/m9301-running.jpg"&gt;&lt;img src='/images/pdp11/m9301-running_thumbnail_tall.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: CPU debug V -- chasing lights!</title><link href="http://fritzm.github.io/cpu-debug-5.html" rel="alternate"></link><published>2016-06-19T00:00:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-06-19:cpu-debug-5.html</id><summary type="html">&lt;p&gt;Tracked down the source of the inverted result after register-to-register move problem on GRA: outputs of the
subsidiary ALU control ROM E74 on pins 6 and 7 are floating.  Will need some closer inspection to determine if this
is a board fault or a chip fault.  In the meantime, I have a spare GRA which I had been reluctant to try because it
has a "bad" sticker on it...  Decided to give it a try anyway, and it seems to be working much better than the one I
have been debugging.&lt;/p&gt;
&lt;p&gt;Now have enough of the CPU debugged to toggle in and run a simple light chaser program:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;000000&lt;/span&gt;  &lt;span class="nt"&gt;013700&lt;/span&gt;  &lt;span class="nt"&gt;177570&lt;/span&gt;  &lt;span class="nt"&gt;L0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="nt"&gt;MOV&lt;/span&gt;     &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nn"&gt;#177570&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;R0&lt;/span&gt;    &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;LOAD&lt;/span&gt; &lt;span class="nt"&gt;COUNT&lt;/span&gt; &lt;span class="nt"&gt;FROM&lt;/span&gt; &lt;span class="nt"&gt;SWITCH&lt;/span&gt; &lt;span class="nt"&gt;REGISTER&lt;/span&gt;
&lt;span class="nt"&gt;000004&lt;/span&gt;  &lt;span class="nt"&gt;005300&lt;/span&gt;          &lt;span class="nt"&gt;L1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="nt"&gt;DEC&lt;/span&gt;     &lt;span class="nt"&gt;R0&lt;/span&gt;              &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;COUNT&lt;/span&gt; &lt;span class="nt"&gt;DOWN&lt;/span&gt;
&lt;span class="nt"&gt;000006&lt;/span&gt;  &lt;span class="nt"&gt;001376&lt;/span&gt;                  &lt;span class="nt"&gt;BNE&lt;/span&gt;     &lt;span class="nt"&gt;L1&lt;/span&gt;              &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;LOOP&lt;/span&gt; &lt;span class="nt"&gt;UNTIL&lt;/span&gt; &lt;span class="nt"&gt;ZERO&lt;/span&gt;
&lt;span class="nt"&gt;000010&lt;/span&gt;  &lt;span class="nt"&gt;006301&lt;/span&gt;                  &lt;span class="nt"&gt;ASL&lt;/span&gt;     &lt;span class="nt"&gt;R1&lt;/span&gt;              &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;SHIFT&lt;/span&gt; &lt;span class="nt"&gt;DISPLAY&lt;/span&gt; &lt;span class="nt"&gt;VALUE&lt;/span&gt;
&lt;span class="nt"&gt;000012&lt;/span&gt;  &lt;span class="nt"&gt;001002&lt;/span&gt;                  &lt;span class="nt"&gt;BNE&lt;/span&gt;     &lt;span class="nt"&gt;L2&lt;/span&gt;              &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;SKIP&lt;/span&gt; &lt;span class="nt"&gt;AHEAD&lt;/span&gt; &lt;span class="nt"&gt;IF&lt;/span&gt; &lt;span class="nt"&gt;NOT&lt;/span&gt; &lt;span class="nt"&gt;SHIFTED&lt;/span&gt; &lt;span class="nt"&gt;OUT&lt;/span&gt;
&lt;span class="nt"&gt;000014&lt;/span&gt;  &lt;span class="nt"&gt;012701&lt;/span&gt;  &lt;span class="nt"&gt;000001&lt;/span&gt;          &lt;span class="nt"&gt;MOV&lt;/span&gt;     &lt;span class="nn"&gt;#1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;R1&lt;/span&gt;           &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;ELSE&lt;/span&gt; &lt;span class="nt"&gt;RELOAD&lt;/span&gt;
&lt;span class="nt"&gt;000020&lt;/span&gt;  &lt;span class="nt"&gt;010137&lt;/span&gt;  &lt;span class="nt"&gt;177570&lt;/span&gt;  &lt;span class="nt"&gt;L2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="nt"&gt;MOV&lt;/span&gt;     &lt;span class="nt"&gt;R1&lt;/span&gt;&lt;span class="o"&gt;,@&lt;/span&gt;&lt;span class="nn"&gt;#177570&lt;/span&gt;     &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;STORE&lt;/span&gt; &lt;span class="nt"&gt;TO&lt;/span&gt; &lt;span class="nt"&gt;DISPLAY&lt;/span&gt; &lt;span class="nt"&gt;REGISTER&lt;/span&gt;
&lt;span class="nt"&gt;000024&lt;/span&gt;  &lt;span class="nt"&gt;000765&lt;/span&gt;                  &lt;span class="nt"&gt;BR&lt;/span&gt;      &lt;span class="nt"&gt;L0&lt;/span&gt;              &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;REPEAT&lt;/span&gt; &lt;span class="nt"&gt;FROM&lt;/span&gt; &lt;span class="nt"&gt;THE&lt;/span&gt; &lt;span class="nt"&gt;TOP&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;div class="videobox"&gt;
                &lt;iframe width="640" height="390"
                    src='https://www.youtube.com/embed/ZhuzC9v3q-k?rel=0'
                    frameborder='0' webkitAllowFullScreen mozallowfullscreen
                    allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Some notes on the program and video above since I've received some questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The listing here is shown assembled at location 000000, but the program is relocatable and can be toggled in at any
convenient address (000000, on top of the trap vectors, probably isn't the best choice!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data display should be on "DISPLAY REGISTER" to see the chase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The front panel toggles are loaded into a counter to control the speed of the chase.  Without some of the most
significant bits set the chase may go too fast to see, especially on older 11's with incandescent indicators.  All
toggles off is a special case: this will be the slowest chase, since as written the counter wraps around when
decremented before being checked for zero.  The video has toggles 15 and 14 up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you look at the address lights in the video, you can see that I ran this program from address 100000.  This was
because at the time I had a fault in the first 16KW of memory on my MS11-L so I couldn't execute any code at lower
addresses.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: MS11-L debug</title><link href="http://fritzm.github.io/ms11-debug.html" rel="alternate"></link><published>2016-06-18T00:00:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-06-18:ms11-debug.html</id><summary type="html">&lt;p&gt;After addressing the -15V problem on the MS11, most of the bad behaviors seem to have cleared up except a stuck (on)
bit 6 in the first 16K words of address space (000000-077776).  Hooked up the new logic analyzer, and it has been very
useful in troubleshooting the board -- can easily capture and inspect the timing of complete memory cycles.  Definitely
worth the investment!&lt;/p&gt;
&lt;p&gt;Using the analyzer, I was able to verify the refresh and chip select logic on the board, then track down the stuck bit
to what seems to be a single failed DRAM chip (E96 on the MS11-L engineering drawings).  I'd like to test the entire
card before ordering replacement parts, but need to set up address translation to get beyond the first two banks from
the console.&lt;/p&gt;
&lt;p&gt;Here is the address translation register setup that I used for testing.  This was followed by a deposit of 000001 to
KT11 SR0 (777572) to enable translation.  KT11 SR3 was left all zeros to keep D space disabled.  This setup allows
console access to physical addresses in banks 1 through 7 by appropriate settings of virtual address bits 13 through
15.  I wanted to reserve PAR7 to map I/O space, so I left out bank 0 since it was one of the two already tested.&lt;/p&gt;
&lt;style&gt;
.memlist { display: inline; border-collapse: collapse; margin-right: 1em; }
.memlist caption { font-weight: bold; }
.memlist tr:nth-child(even) { background-color: #f2f2f2; }
.memlist th, .memlist td { padding: 5px; }
.memlist td { border: 1px solid lightgray; font-family: "Courier", monospace; }
&lt;/style&gt;

&lt;table class="memlist"&gt;
&lt;caption&gt;Kernel I PAR&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;772340&lt;/td&gt;&lt;td&gt;001000&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;772342&lt;/td&gt;&lt;td&gt;002000&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;772344&lt;/td&gt;&lt;td&gt;003000&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;772346&lt;/td&gt;&lt;td&gt;004000&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;772350&lt;/td&gt;&lt;td&gt;005000&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;772352&lt;/td&gt;&lt;td&gt;006000&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;772354&lt;/td&gt;&lt;td&gt;007000&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;772356&lt;/td&gt;&lt;td&gt;007600&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table class="memlist"&gt;
&lt;caption&gt;Kernel I PDR&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;772300&lt;/td&gt;&lt;td&gt;077406&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;772302&lt;/td&gt;&lt;td&gt;077406&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;772304&lt;/td&gt;&lt;td&gt;077406&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;772306&lt;/td&gt;&lt;td&gt;077406&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;772310&lt;/td&gt;&lt;td&gt;077406&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;772312&lt;/td&gt;&lt;td&gt;077406&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;772314&lt;/td&gt;&lt;td&gt;077406&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;772316&lt;/td&gt;&lt;td&gt;077406&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This worked as expected according to panel PROG PHY and the logic analyzer, so the KT11 option which I had not
previously tested is at least working for kernel I space.  Tested each bank on the MS11 from the front panel using this
setup, and uncovered that bank 4 bit 10 also has a stuck on condition.  Since bank 1 is working now, I can use that
as work space for the time being in order to continue the CPU debug while awaiting some replacement DRAM chips in the
mail.&lt;/p&gt;
&lt;p&gt;Pics here of the logic analyzer setup, and captured traces of a write and subsequent read to one of the misbehaving
chips:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/ms11-debug.jpg"&gt;&lt;img src='/images/pdp11/ms11-debug_thumbnail_tall.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/bad-dram-write.jpg"&gt;&lt;img src='/images/pdp11/bad-dram-write_thumbnail_tall.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/bad-dram-read.jpg"&gt;&lt;img src='/images/pdp11/bad-dram-read_thumbnail_tall.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: MS11-L and CPU debug IV</title><link href="http://fritzm.github.io/cpu-debug-4.html" rel="alternate"></link><published>2016-06-12T00:00:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-06-12:cpu-debug-4.html</id><summary type="html">&lt;p&gt;Made some progress on the inverted result after register-to-register move problem: with the help of the KM11, extender
card, and a logic probe I was able to track down that signal ALUM L coming onto the DAP is not asserted when it should
be for a MOV instruction.  This means the ALU is performing in arithmetic instead of logic mode and thus the incorrect
result.&lt;/p&gt;
&lt;p&gt;I next moved the extender card over to GRA, where this signal originates from a subsidiary ROM, but unfortunately at
that point the MS11-L memory behavior got even worse, putting and end to these experiments.  So I'll have to tackle
that first...&lt;/p&gt;
&lt;p&gt;Moved the MR11 ROM over to the expansion backplane where the MS11-L resides, and it works fine there.  So it doesn't
seem to be a bus wiring or jumper problem onto the expansion backplane.  Checked the power input pins on the backplane
behind the MS11-L.  5V was a little low there; trimmed this up.  Probably need to clean or replace the Molex contacts
on the power distribution board in the cabinet, as it seems a few mV are being shed there needlessly compared to the
output of the same regulator on the main backplane, but things seem within stated tolerances for now.&lt;/p&gt;
&lt;p&gt;The -15V input to the MS11-L was missing entirely.  Removed the DD11 expansion backplane, and added jumpers between
the battery backup supply inputs and the corresponding main supply inputs, per documentation.  Now have -15 to the
MS11-L, but still no joy.&lt;/p&gt;
&lt;p&gt;Will need to go deeper into the MS11-L next time...&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: KM11 replica and CPU debug III</title><link href="http://fritzm.github.io/cpu-debug-3.html" rel="alternate"></link><published>2016-06-11T00:00:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-06-11:cpu-debug-3.html</id><summary type="html">&lt;p&gt;Received the boards and components for the KM11 replica; stuffed and soldered, and it appears to work!  There are
some photos below.  I can easily single-step microcode, clock states, and bus cycles now, which should really help
with the CPU debug.&lt;/p&gt;
&lt;p&gt;Swapped DAP for a spare, and this has fixed the stuck PC issue.  Memory issues remain, but by choosing a working
memory range, I can start to toggle in and attempt to execute very simple programs.&lt;/p&gt;
&lt;p&gt;The simplest possible program, unconditional branch to self, seems to execute correctly:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;001000 000777         BR      .-0
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A register to register data move test does not however:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;001000 010203         MOV     R2,R3
001002 000776         BR      .-2
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Control flow is as expected, but the value that ends up in R3 seems to be negated.  Still, pretty good progress!
Now that I can step machine states, the next step will be to put the DAP out on an extender card and start tracking
down signals with a logic probe.&lt;/p&gt;
&lt;p&gt;The HP1662A logic analyzer from eBay has also arrived; should come in handy in investigating the memory issue.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/km11.jpg"&gt;&lt;img src='/images/pdp11/km11_thumbnail_tall.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/km11-action.jpg"&gt;&lt;img src='/images/pdp11/km11-action_thumbnail_tall.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: CPU debug II</title><link href="http://fritzm.github.io/cpu-debug-2.html" rel="alternate"></link><published>2016-06-05T00:00:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-06-05:cpu-debug-2.html</id><summary type="html">&lt;p&gt;Received and installed the replacement lamps for the -15V regulators.  Pic below shows what the power supply looks
like with all the lamps functioning.&lt;/p&gt;
&lt;p&gt;Verified backplane DC voltages and ripple currents again, and re-trimmed all the DC regulators.  Verified AC LO and
DC LO de-asserted and free of glitches.  Found some harness wiring mistakes to the DD11 expansion backplane; corrected these.&lt;/p&gt;
&lt;p&gt;Tried some CPU board-swaps looking for a quick win, but broken console behavior didn't change significantly with
different boards.&lt;/p&gt;
&lt;p&gt;Investigated the timing generator board, and found that the crystal oscillator wasn't oscillating.  Tracked this down
to inductor L1 which looked as if it had been partially sheared away from the board at some point during installation/removal/storage.  Repaired this.  Success!  Able to load addresses from the front console now. Switches are mirrored
in the BR when halted in console.&lt;/p&gt;
&lt;p&gt;Address bit 0 seems stuck.  Swapped PDR from spare board back to the original.  Can now examine and modify the
light/switch register, and examine the contents of the MR11 ROM.&lt;/p&gt;
&lt;p&gt;Jumpered the DD11 expansion backplane back in, and slotted in the MS11-L memory.  Limited success: can modify and
examine memory for example near address 001000, but cannot modify low memory addresses.  In some ranges, can only
modify every other word.  Also, PC seems stuck at 022000.&lt;/p&gt;
&lt;p&gt;At this point, I could really use a KM11 maintenance board set.  These are pretty hard to get a hold of, but a few
folks on the web have built their own reproductions.  I put in a PCB order to ExpressPCB with a KM11 layout by Tom
Uban (described &lt;a href="http://www.ubanproductions.com/museum.html"&gt;here&lt;/a&gt;), and also put parts on order to stuff it.&lt;/p&gt;
&lt;p&gt;Also, figuring I'll need to be going deeper into the CPU debug, I found and bought an
&lt;a href="http://www.ebay.com/itm/142004889393"&gt;HP1662A logic analyzer&lt;/a&gt; on eBay, for about the same money as the KM11 PCB and
parts!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/power-lights.jpg"&gt;&lt;img src='/images/pdp11/power-lights_thumbnail_tall.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: Power fixes and CPU debug</title><link href="http://fritzm.github.io/power-fixes.html" rel="alternate"></link><published>2016-05-30T00:00:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-05-30:power-fixes.html</id><summary type="html">&lt;p&gt;Connected up the aforementioned red wire hack to the new power harness, and verified +5V to slots 10 through 15.
Console is no longer all address and data lights on, but basic console load address / examine / deposit operations are
still not working.  A random assortment of address lines seem stuck, different on each power cycle.  About the only
thing that reliably functions from the console is loading the two highest address bits from the switches, immediately
after a reset.  Pulled the floating point unit, un-jumpered the DD11 expansion backplane, and removed all peripherals
except the MR11 diode ROM; same (broken) behavior...&lt;/p&gt;
&lt;p&gt;Scoped all the DC voltages, and did not notice any glitches.  Pulled the H742s for some bench work: verified AC LO and
DC LO signaling on both units, replaced a broken Mate-n-Lok connector on one of the units, blew out dust from all the 5V
regulators and replaced their indicator bulbs with modern equivalent (CM7381). Sourced and put on order a modern
equivalent (OL-6003BP) for the indicator bulbs on the -15V regulators.&lt;/p&gt;
&lt;p&gt;Next steps will be to verify various Unibus signals on the backplane, then maybe play some swap games with CPU card
spares to see if I can get closer to a working console as a starting point.  All I have time for this weekend, though; sorry nothing new to see so no new pictures this time!&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: Initial Power On!</title><link href="http://fritzm.github.io/initial-power-on.html" rel="alternate"></link><published>2016-05-08T00:00:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-05-08:initial-power-on.html</id><summary type="html">&lt;p&gt;Beeped out the new harness to check for shorts or incorrect pins, then plugged in just the H742s and fired it up.  All
the DC regulator modules seem to be working, and I was able to trim them up to nominal voltages at the CPU end of the
harness.  The indicator lamps on all but one of the DC regulators seem to be burned out, though, so I put some new lamps
on order (at last for the +5V regulators; a modern equivalent for the -15V regulators is tougher to find).&lt;/p&gt;
&lt;p&gt;Given that success, I plugged in the CPU side of the harness, took a deep breath, and powered on!  Hmmm.  No detonations
or smoke, but all data/address/mode lights lit (see below), which is not right...  Front panel lamp test and data
address mode switches and indicators are working though at least.&lt;/p&gt;
&lt;p&gt;Some investigation on the backplane turned up no +5V to slots 10 though 15, which could be part of the problem.  Ah,
that's what the mysterious clipped red wire soldered to the backplane might have been about (visible in the top right
&lt;a href="http://fritzm.github.io/images/pdp11/kb11a-backplane.jpg"&gt;here&lt;/a&gt;...)  Sure enough, some inspection shows the corresponding trace on
the backplane looks burnt!  I could hack this red wire into my new harness I guess, but I'd rather remove it and try to
repair the board trace with a shunt.  So the backplane will have to come out.  I guess that's what I get for not
investigating the weird red wire and for not beeping out the power distribution on the backplane before mounting
and populating it...&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/initial-power-on.jpg"&gt;&lt;img src='/images/pdp11/initial-power-on_thumbnail_tall.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: Power Harness, continued</title><link href="http://fritzm.github.io/power-harness-2.html" rel="alternate"></link><published>2016-04-23T00:00:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-04-23:power-harness-2.html</id><summary type="html">&lt;p&gt;Moved the power modules and partial harness back over to the racks today, got everything remounted, finished and
dressed the backplane terminations, and completed the inter-H742 connections.&lt;/p&gt;
&lt;p&gt;I did not do the runs for the backplane memory to the lower H742, as I do not have any backplane memory.  I probably
won't ever have any, either: these memory options are specialized to the 11/45, are quite rare, and only cover part of
the available address space.  Additionally, they would require me to track down the details of a backplane ECO to do
the corresponding parts of the harness correctly.  The core and MOS memory that I do actually have are all system-unit
options anyway.&lt;/p&gt;
&lt;p&gt;Here are some pics of the in-rack wiring in progress, and a couple views of the finished harness.  If you add up
the capacity of the DC modules, you'll see that an 11/45 like mine (with floating point) is provisioned with +5V at 100
[sic] amps, and -15V at 20 amps.  That's no joke of a power supply...&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/harness-progress.jpg"&gt;&lt;img src='/images/pdp11/harness-progress_thumbnail_tall.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/harness-complete.jpg"&gt;&lt;img src='/images/pdp11/harness-complete_thumbnail_tall.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/power-supplies.jpg"&gt;&lt;img src='/images/pdp11/power-supplies_thumbnail_tall.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: Power Harness</title><link href="http://fritzm.github.io/power-harness.html" rel="alternate"></link><published>2016-04-17T00:00:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-04-17:power-harness.html</id><summary type="html">&lt;p&gt;The main bit I'm missing from the 11/45 is the power distribution harness; somewhere over the years this was
misplaced, or maybe I accidentally gave it away along with some excess 11/40 parts.  In any case, I haven't had any
luck tracking one of these down (made extra difficult by the fact that my 11/45 is an early model which requires a
slightly different harness than more recent models), so I'll have to build one myself from scratch.&lt;/p&gt;
&lt;p&gt;Luckily the required harness is pretty well documented in the engineering print sets.  The crimp pins are standard
Mate-n-Lok still in production.  Some of the connectors are out of production, but they haven't been too hard to
track down.&lt;/p&gt;
&lt;p&gt;Here are some pictures of the amassed wire of appropriate guages and colors, connectors, crimp pins, and the start of
the harness build on the bench:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/harness-parts.jpg"&gt;&lt;img src='/images/pdp11/harness-parts_thumbnail_tall.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/harness-bench.jpg"&gt;&lt;img src='/images/pdp11/harness-bench_thumbnail_tall.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: Some parts from eBay</title><link href="http://fritzm.github.io/ebay-parts.html" rel="alternate"></link><published>2016-04-09T11:25:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-04-09:ebay-parts.html</id><summary type="html">&lt;p&gt;I've been keeping an eye on eBay and have collected a few more goodies: a DD11-D nine-slot expansion backplane, a fully
populated (128K x 18bit) MS11-L MOS memory board, and a couple of replacement BC08-R cables for connecting the console
to the CPU cards.  The MS11-L is a bit of a luxury; I am figuring it will be easier to deal with during bringup than
the core memory systems I have on hand.  It will also be nice to run with a full address space.&lt;/p&gt;
&lt;p&gt;Below is an updated shot of the CPU chassis with the expansion backplane installed, populated with bus jumpers,
terminators, grant continuity cards, the MS11-L memory, a DL11 serial interface, and an MR11-DB boostrap ROM.  I've gone
ahead and slotted in the FPU in the first four slots, since the cleaned and refurbished CPU cabinet is probably the
safest place to store them now.  Console cables are also installed:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/boards-in-chassis-2.jpg"&gt;&lt;img src='/images/pdp11/boards-in-chassis-2_thumbnail_tall.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The MR11 ROM is an interesting bit, and probably worth a comment.  This is a 32-word diode-matrix ROM card.  The bits
are physically laid out on the card (see pictures below); where there is a diode, there is a logical 1 bit and where
there is the absence of a diode there is a logical 0 bit.  Typically the matrix would be loaded with a bootstrap program,
to save the operator from having to toggle it in from the console on each boot.&lt;/p&gt;
&lt;p&gt;The program could be modified by physically adding or removing diodes in the matrix.  My card has had such a mod; there
is a handwritten note attached from some engineer describing this.  The mod customizes the bootstrap to always load
from an RK disk unit, to avoid having to toggle in the device address at boot.  I will probably revert this mod because
I like having things in fairly stock/usual condition.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/mr11-with-note.jpg"&gt;&lt;img src='/images/pdp11/mr11-with-note_thumbnail_tall.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/mr11-bare.jpg"&gt;&lt;img src='/images/pdp11/mr11-bare_thumbnail_tall.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For fun, here's the source listing of the stock bootstrap.  You can match the octal digits of the machine code against
the diodes in the ROM above (low word addresses at the top of the matrix, and least-significant-bits on the left).&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;173100&lt;/span&gt; &lt;span class="nt"&gt;013701&lt;/span&gt;         &lt;span class="nt"&gt;MOV&lt;/span&gt;     &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nn"&gt;#177570&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;R1&lt;/span&gt;     &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;READ&lt;/span&gt; &lt;span class="nt"&gt;SWITCH&lt;/span&gt; &lt;span class="nt"&gt;REG&lt;/span&gt; &lt;span class="nt"&gt;FOR&lt;/span&gt; &lt;span class="o"&gt;....&lt;/span&gt;
       &lt;span class="nt"&gt;177570&lt;/span&gt;
&lt;span class="nt"&gt;173104&lt;/span&gt; &lt;span class="nt"&gt;000005&lt;/span&gt; &lt;span class="nt"&gt;BEGIN&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="nt"&gt;RESET&lt;/span&gt;                   &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;FORCE&lt;/span&gt; &lt;span class="nt"&gt;CLEAR&lt;/span&gt; &lt;span class="nt"&gt;IF&lt;/span&gt; &lt;span class="nt"&gt;RETRY&lt;/span&gt;
&lt;span class="nt"&gt;173106&lt;/span&gt; &lt;span class="nt"&gt;010100&lt;/span&gt;         &lt;span class="nt"&gt;MOV&lt;/span&gt;     &lt;span class="nt"&gt;R1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;R0&lt;/span&gt;           &lt;span class="o"&gt;;...&lt;/span&gt;&lt;span class="nc"&gt;.DEVICE&lt;/span&gt; &lt;span class="nt"&gt;WC&lt;/span&gt; &lt;span class="nt"&gt;ADDRESS&lt;/span&gt;
&lt;span class="nt"&gt;173110&lt;/span&gt; &lt;span class="nt"&gt;012710&lt;/span&gt;         &lt;span class="nt"&gt;MOV&lt;/span&gt;     &lt;span class="nn"&gt;#-256&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="k"&gt;@R0&lt;/span&gt;       &lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;SET&lt;/span&gt; &lt;span class="nt"&gt;TO&lt;/span&gt; &lt;span class="nt"&gt;READ&lt;/span&gt; &lt;span class="nt"&gt;256&lt;/span&gt; &lt;span class="nt"&gt;WORDS&lt;/span&gt;
       &lt;span class="nt"&gt;177400&lt;/span&gt;
&lt;span class="nt"&gt;173114&lt;/span&gt; &lt;span class="nt"&gt;020027&lt;/span&gt;         &lt;span class="nt"&gt;CMP&lt;/span&gt;     &lt;span class="nt"&gt;R0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;#177344&lt;/span&gt;      &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;IS&lt;/span&gt; &lt;span class="nt"&gt;IT&lt;/span&gt; &lt;span class="nt"&gt;DECTAPE&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
       &lt;span class="nt"&gt;177344&lt;/span&gt;
&lt;span class="nt"&gt;173120&lt;/span&gt; &lt;span class="nt"&gt;001007&lt;/span&gt;         &lt;span class="nt"&gt;BNE&lt;/span&gt;     &lt;span class="nt"&gt;START&lt;/span&gt;           &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;NO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;GO&lt;/span&gt; &lt;span class="nt"&gt;TO&lt;/span&gt; &lt;span class="nt"&gt;START&lt;/span&gt;
&lt;span class="nt"&gt;173122&lt;/span&gt; &lt;span class="nt"&gt;012740&lt;/span&gt;         &lt;span class="nt"&gt;MOV&lt;/span&gt;     &lt;span class="nn"&gt;#4002&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;-&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;R0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;     &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;YES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;MOVE&lt;/span&gt; &lt;span class="nt"&gt;TAPE&lt;/span&gt; &lt;span class="nt"&gt;TO&lt;/span&gt; &lt;span class="nt"&gt;FRONT&lt;/span&gt;
       &lt;span class="nt"&gt;004002&lt;/span&gt;
&lt;span class="nt"&gt;173126&lt;/span&gt; &lt;span class="nt"&gt;005710&lt;/span&gt;         &lt;span class="nt"&gt;TST&lt;/span&gt;     &lt;span class="k"&gt;@R0&lt;/span&gt;             &lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;WAIT&lt;/span&gt; &lt;span class="nt"&gt;FOR&lt;/span&gt; &lt;span class="nt"&gt;ERROR&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="nt"&gt;173130&lt;/span&gt; &lt;span class="nt"&gt;100376&lt;/span&gt;         &lt;span class="nt"&gt;BPL&lt;/span&gt;     &lt;span class="nc"&gt;.-2&lt;/span&gt;
&lt;span class="nt"&gt;173132&lt;/span&gt; &lt;span class="nt"&gt;005740&lt;/span&gt;         &lt;span class="nt"&gt;TST&lt;/span&gt;     &lt;span class="nt"&gt;-&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;R0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;           &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;IS&lt;/span&gt; &lt;span class="nt"&gt;IT&lt;/span&gt; &lt;span class="nt"&gt;ENDZONE&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="nt"&gt;173134&lt;/span&gt; &lt;span class="nt"&gt;100363&lt;/span&gt;         &lt;span class="nt"&gt;BPL&lt;/span&gt;     &lt;span class="nt"&gt;BEGIN&lt;/span&gt;           &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;NO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;TRY&lt;/span&gt; &lt;span class="nt"&gt;AGAIN&lt;/span&gt;
&lt;span class="nt"&gt;173136&lt;/span&gt; &lt;span class="nt"&gt;022020&lt;/span&gt;         &lt;span class="nt"&gt;CMP&lt;/span&gt;     &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;R0&lt;/span&gt;&lt;span class="o"&gt;)+,(&lt;/span&gt;&lt;span class="nt"&gt;R0&lt;/span&gt;&lt;span class="o"&gt;)+&lt;/span&gt;     &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;ADJUST&lt;/span&gt; &lt;span class="nt"&gt;POINTER&lt;/span&gt;
&lt;span class="nt"&gt;173140&lt;/span&gt; &lt;span class="nt"&gt;012740&lt;/span&gt; &lt;span class="nt"&gt;START&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="nt"&gt;MOV&lt;/span&gt;     &lt;span class="nn"&gt;#5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;-&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;R0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;        &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;NOW&lt;/span&gt; &lt;span class="nt"&gt;START&lt;/span&gt; &lt;span class="nt"&gt;ACTUAL&lt;/span&gt; &lt;span class="nt"&gt;READ&lt;/span&gt;
       &lt;span class="nt"&gt;000005&lt;/span&gt;
&lt;span class="nt"&gt;173144&lt;/span&gt; &lt;span class="nt"&gt;105710&lt;/span&gt;         &lt;span class="nt"&gt;TSTB&lt;/span&gt;    &lt;span class="k"&gt;@R0&lt;/span&gt;             &lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;WAIT&lt;/span&gt; &lt;span class="nt"&gt;FOR&lt;/span&gt; &lt;span class="nt"&gt;DONE&lt;/span&gt;
&lt;span class="nt"&gt;173146&lt;/span&gt; &lt;span class="nt"&gt;100376&lt;/span&gt;         &lt;span class="nt"&gt;BPL&lt;/span&gt;     &lt;span class="nc"&gt;.-2&lt;/span&gt;
&lt;span class="nt"&gt;173150&lt;/span&gt; &lt;span class="nt"&gt;005710&lt;/span&gt;         &lt;span class="nt"&gt;TST&lt;/span&gt;     &lt;span class="k"&gt;@R0&lt;/span&gt;             &lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;ERROR&lt;/span&gt; &lt;span class="nt"&gt;ENCOUNTERED&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="nt"&gt;173152&lt;/span&gt; &lt;span class="nt"&gt;100754&lt;/span&gt;         &lt;span class="nt"&gt;BMI&lt;/span&gt;     &lt;span class="nt"&gt;BEGIN&lt;/span&gt;           &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;IF&lt;/span&gt; &lt;span class="nt"&gt;SO&lt;/span&gt; &lt;span class="nt"&gt;START&lt;/span&gt; &lt;span class="nt"&gt;OVER&lt;/span&gt;
&lt;span class="nt"&gt;173154&lt;/span&gt; &lt;span class="nt"&gt;105010&lt;/span&gt;         &lt;span class="nt"&gt;CLRB&lt;/span&gt;    &lt;span class="k"&gt;@R0&lt;/span&gt;             &lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;FOR&lt;/span&gt; &lt;span class="nt"&gt;DECTAPE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;STOP&lt;/span&gt; &lt;span class="nt"&gt;TRANSPORT&lt;/span&gt;
&lt;span class="nt"&gt;173156&lt;/span&gt; &lt;span class="nt"&gt;000137&lt;/span&gt;         &lt;span class="nt"&gt;JMP&lt;/span&gt;     &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nn"&gt;#0&lt;/span&gt;             &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;GO&lt;/span&gt; &lt;span class="nt"&gt;TO&lt;/span&gt; &lt;span class="nt"&gt;ROUTINE&lt;/span&gt; &lt;span class="nt"&gt;LOADED&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Hmmm, the Pygments syntax highlighting package used by my blog generator doesn't seem to grok MACRO-11; may have to
do something about that...&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: VT52</title><link href="http://fritzm.github.io/vt52.html" rel="alternate"></link><published>2016-01-03T20:17:00-08:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-01-03:vt52.html</id><summary type="html">&lt;p&gt;Spend some time reviving a VT52 that I intend to use with the PDP-11.  This was a pretty nice eBay find.  There was some
oxidation and flakiness with the connectors to the chargen ROM daughter card (I remember this being typical
of VT52s even back in the day).  A little more difficult to track down were some flaky solder joints around the clock
chip.  But, everything else seems to be in pretty good shape and its working well now!  Here it is hooked up to a linux
VM on my macbook, compiling some LSST code to generate some output as a test drive:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/vt52.jpg"&gt;&lt;img src='/images/pdp11/vt52_thumbnail_tall.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Man, seeing that funky font again, with its non-descending-descenders, is really great!  Surprisingly, it doesn't seem
to be available in digital format anywhere, unlike the later VT100 fonts, etc.  Try as I might, I couldn't seem to find
the chargen ROM listing in any of the DEC documentation archives, either.&lt;/p&gt;
&lt;p&gt;Well, I do have a Digilent FPGA eval card and some level conversion chips laying around, so as a holiday hack project
I put together a quick ROM scanner in Verlog, interfaced it to the VT52 chargen on a breadboard, and scanned out the
contents.  Here's a picture of the scanner in action, and the produced output:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/rom-scanner.jpg"&gt;&lt;img src='/images/pdp11/rom-scanner_thumbnail_tall.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The yellow-ish board on the right is the VT52 chargen.  The Verilog source for the scanner, the scanned data, and some
preliminary attempts to convert the data to a few modern font formats are available on my github over at
&lt;a href="https://github.com/fritzm/vt52"&gt;https://github.com/fritzm/vt52&lt;/a&gt;.  I need to learn some more about font formats to make some better font files; if I do
I will update that repo.  Any help from fontophiles gladly accepted!&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: CPU Backplane and logic</title><link href="http://fritzm.github.io/backplane-and-logic.html" rel="alternate"></link><published>2015-07-03T14:56:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2015-07-03:backplane-and-logic.html</id><summary type="html">&lt;p&gt;Mounted the CPU backplane, and slotted in the CPU and MMU logic cards.  The empty slots on the right are for the FPU -- I have those on hand but figure I'll wait to slot them until I've got the basic CPU up and running.&lt;/p&gt;
&lt;p&gt;One kind of interesting thing: the logic boards were stored vertically for several decades, and on some of the cards with plastic ribbon-cable connectors the plastic seems to have flaked and shed and fallen down the boards.  The flakey substance then grew some impressive crystals between some of the solder traces.  Scrubbed these out with some anhydrous IPA.&lt;/p&gt;
&lt;p&gt;A tip copied from a fellow restorer: Alconox detergent for removing grime from various plastic components.  Parts soaked overnight come out looking nearly new (here you can see the cleaned plastic card guides).&lt;/p&gt;
&lt;p&gt;Also pictured here are the characteristic bloody knuckles that are obtained whenever wrestling with PDP backplanes, logic cards, and terminators in close confines.  That really takes you back...&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/boards-in-chassis.jpg"&gt;&lt;img src='/images/pdp11/boards-in-chassis_thumbnail_tall.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/board-with-crystals.jpg"&gt;&lt;img src='/images/pdp11/board-with-crystals_thumbnail_tall.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/crystals.jpg"&gt;&lt;img src='/images/pdp11/crystals_thumbnail_tall.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/knuckles.jpg"&gt;&lt;img src='/images/pdp11/knuckles_thumbnail_tall.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: H742s and front panel</title><link href="http://fritzm.github.io/panel-and-742s.html" rel="alternate"></link><published>2015-06-21T18:14:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2015-06-21:panel-and-742s.html</id><summary type="html">&lt;p&gt;The H742 supplies are now back together, mounted in the cabinet, and wired through to the 861.  I've powered them up and run them for minutes at a time (without any DC regulator loads) and there have been no surprise detonations...&lt;/p&gt;
&lt;p&gt;The repainted cabinet side door has also been remounted.&lt;/p&gt;
&lt;p&gt;Spent some time on the front panel as well.  Removed the tubular lock and took a trip to the local locksmith to have a new key made up.  Replaced all the incandescent indicator lamps with the closest modern equivalent.  Panel is now remounted and it's starting to look like a real '11!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/742s-mounted.jpg"&gt;&lt;img src='/images/pdp11/742s-mounted_thumbnail_tall.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/front-panel.jpg"&gt;&lt;img src='/images/pdp11/front-panel_thumbnail_tall.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: AC power and cooling</title><link href="http://fritzm.github.io/fans-and-h742s.html" rel="alternate"></link><published>2015-06-07T14:15:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2015-06-07:fans-and-h742s.html</id><summary type="html">&lt;p&gt;Spent a lot of time over a couple weekends cleaning and reconditioning all the muffin cooling fans for the CPU cabinet and power supplies.  As you can see in the photo below, there are a lot of these!  All reassembled now, and wired along with the back-of-cabinet power distribution board.  Also did a clean on the big box fan at the top of the rack, not seen here.&lt;/p&gt;
&lt;p&gt;I have also completely torn down the H742s to give them a thorough clean, touch up a few last corrosion spots, and replace the failing neon indicators.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/chassis-with-fans.jpg"&gt;&lt;img src='/images/pdp11/chassis-with-fans_thumbnail_tall.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/742-rebuild.jpg"&gt;&lt;img src='/images/pdp11/742-rebuild_thumbnail_tall.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: H742 power control boards</title><link href="http://fritzm.github.io/power-controllers.html" rel="alternate"></link><published>2015-05-23T16:30:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2015-05-23:power-controllers.html</id><summary type="html">&lt;p&gt;Found a little time to clean up and go through the power control boards for the H742 supplies.  They are looking pretty good.  Even the big electrolytics seem fine on first look.  These things were built with very high quality components, and they really seem to last and last.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/pwr-ctrls.jpg"&gt;&lt;img src='/images/pdp11/pwr-ctrls_thumbnail_tall.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: Teardown and corrosion remediation</title><link href="http://fritzm.github.io/corrosion.html" rel="alternate"></link><published>2015-04-11T18:45:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2015-04-11:corrosion.html</id><summary type="html">&lt;p&gt;Had a little more time to work on the PDP-11 this weekend.  Mostly going after some corrosion on the CPU cabinet and H742 power supplies.  Tore these down, sanded down the corroded bits, then hit with a satin finish Rustoleum rattle-can which dries to a reasonable approximation of the original powder-coat.&lt;/p&gt;
&lt;p&gt;Neon indicators on the H742s are dim and flickery, so ordered some replacements for these, too.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/h742-teardown.jpg"&gt;&lt;img src='/images/pdp11/h742-teardown_thumbnail_tall.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/h742-corrosion.jpg"&gt;&lt;img src='/images/pdp11/h742-corrosion_thumbnail_tall.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/cpu-cabinet.jpg"&gt;&lt;img src='/images/pdp11/cpu-cabinet_thumbnail_tall.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: 861 AC power control</title><link href="http://fritzm.github.io/861.html" rel="alternate"></link><published>2015-03-29T10:35:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2015-03-29:861.html</id><summary type="html">&lt;p&gt;Well, might as well start at the beginning with the AC power system, so here's the 861 power control.  In very good shape for some 40 year old kit!  The neon indicator lamps have gone, so I sourced the modern equivalent and put them on order.  Everything else is tight and clean:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/861.jpg"&gt;&lt;img src='/images/pdp11/861_thumbnail_tall.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: Begin Again</title><link href="http://fritzm.github.io/begin-again.html" rel="alternate"></link><published>2015-03-15T18:45:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2015-03-15:begin-again.html</id><summary type="html">&lt;p&gt;Back in the mid/late '80s, when I was hanging around CMU, a computer club member introduced me to the club's nearly forgotten hardware lab.  It was still stuffed with remnants of the earlier time-sharing age, including two or three full-cabinet PDP-11 systems with names like "Banshee" and "Centaur".  I thought these were the coolest -- CPUs you could see inside, and hack with a soldering iron and a wire wrap gun.  Real front panels with lights and toggles, and machine language programming as a physical activity.  For a kid fascinated with computers, it was great.  You couldn't get closer to the metal; you could quite literally get your head inside these machines.&lt;/p&gt;
&lt;p&gt;I began spending off hours in the lab, puttering with the 11s and getting to know them.  Eventually, the club decided it was time to clean house and remove all of the older equipment.  Most stuff was scheduled to be hauled away to the dump, but I was welcome to anything I wanted to haul away myself in advance.  So I bothered some friends with a car, disassembled one of the 11/45s there ("Banshee" I believe) which seemed like the nicest thing, and hauled it off to my off-campus house.  There it resided in the basement with many other oddments for some years.&lt;/p&gt;
&lt;p&gt;Eventually, I ended up moving out to CA, and after some time the 11/45 CPU was disassembled and packed into moving boxes for the west coast as practically as possible, leaving all the bulkier parts behind.&lt;/p&gt;
&lt;p&gt;After a couple of years in CA, I happened on a decomissioned two-rack 11/40 system at Stanford, essentially free for the effort of hauling.  This had most of the missing cabinetry, power supplies, and peripherals needed to reconstruct the 11/45!  So I procurred this and added it to a growing west coast equipment stash.  And then real-life set in -- job changes, house moves, raising a kid...  Through all of that I held on to all the parts, vowing to "get to it someday".  I would pick through the stuff from time to time over the years, but never had the time to take the project very far.&lt;/p&gt;
&lt;p&gt;Well, now "someday" is here!  The kid is off to college and I've moved house once again, but this time I reserved some working space for the project and pulled all the parts so they are together and accessible.  So here we go...&lt;/p&gt;
&lt;p&gt;Here are a some pics from the first weekend: the two H960 racks that are the bones of the whole thing, some glamour shots of the processor backplane and the RK11-C disk controller, and my buddy Chris helping to remount the RK05 drives on their rails temporarily to keep them off the floor and out of harm's way:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/racks.jpg"&gt;&lt;img src='/images/pdp11/racks_thumbnail_tall.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/kb11a-backplane.jpg"&gt;&lt;img src='/images/pdp11/kb11a-backplane_thumbnail_tall.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/rk11c.jpg"&gt;&lt;img src='/images/pdp11/rk11c_thumbnail_tall.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/rk05-help.png"&gt;&lt;img src='/images/pdp11/rk05-help_thumbnail_tall.png'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>three.js and JSFiddle</title><link href="http://fritzm.github.io/jsfiddle-test.html" rel="alternate"></link><published>2014-12-02T20:08:00-08:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2014-12-02:jsfiddle-test.html</id><summary type="html">&lt;p&gt;Here's a small web toy, as a test of embedding a client-side visualisation in this blog.  The toy written in JavaScript using the &lt;a href="http://threejs.org/"&gt;Three.js&lt;/a&gt; 3D graphics library, and is hosted at JSFiddle.net.  If you click the "Edit in JSFiddle" link, you'll go off site to a full multi-pane view of the toy, where you can inspect and modify and play with the various parts of the HTML, CSS, and JavaScript.&lt;/p&gt;
&lt;div style="text-align: center"&gt;
&lt;iframe width="501" height="340" src="http://jsfiddle.net/fritzm/5cyVe/embedded/result/#result" allowfullscreen="allowfullscreen" frameborder="0"&gt;&lt;/iframe&gt;
&lt;/div&gt;</summary><category term="Three.js"></category><category term="JSFiddle"></category></entry><entry><title>Moebious transformation animated GIFs</title><link href="http://fritzm.github.io/moebius.html" rel="alternate"></link><published>2014-12-01T12:45:00-08:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2014-12-01:moebius.html</id><summary type="html">&lt;p&gt;Here are some animated GIFs that I created a few years ago with MATLAB.  These characterize the action of the four classes of Moebius transformations, mapping the complex plane to itself.  They were inspired by the illustrations and analysis in a section of Tristan Needham's excellent book &lt;a href="http://books.google.com/books?vid=ISBN0198534469"&gt;&lt;em&gt;Visual Complex Analysis&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;figure&gt;&lt;img src="/images/moebius/elliptic.gif"&gt;&lt;figcaption&gt;elliptic&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;img src="/images/moebius/hyperbolic.gif"&gt;&lt;figcaption&gt;hyperbolic&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;img src="/images/moebius/loxodromic.gif"&gt;&lt;figcaption&gt;loxodromic&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;img src="/images/moebius/parabolic.gif"&gt;&lt;figcaption&gt;parabolic&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;So what's it all about?  A Moebius transformation is a mapping on the complex numbers of the form &lt;/p&gt;
&lt;div class="math"&gt;$$ M(z) = \frac{az + b}{cz + d}, $$&lt;/div&gt;
&lt;p&gt; where &lt;span class="math"&gt;\(a, b, c, d\)&lt;/span&gt; are complex constants.  Moebius tranformations have many nice features: they are one-to-one and onto on the complex plane (extended with the addition of the "point at &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;"), they form a group under composition, they are conformal (angle preserving).  Interestingly, though conformality only implies that they map infinitesimal circles to other infinitesimal circles, Moebius transformations actually map circles of &lt;em&gt;any&lt;/em&gt; size in the complex plane to other circles in the plane.  For a really nice exposition and proofs of these qualities, see Needham.&lt;/p&gt;
&lt;p&gt;Fixed points on the plane under a Moebius transform will simply be solutions of &lt;/p&gt;
&lt;div class="math"&gt;$$ z = \frac{az+b}{cz+d}, $$&lt;/div&gt;
&lt;p&gt; which is just quadratic in &lt;span class="math"&gt;\(z\)&lt;/span&gt;.  So a (non-identity) Moebius transform will have at most two fixed points, or one when there is a repeated root.  Following Needham, for the remainder of this discussion we'll refer to the fixed points of a given Moebius transformation as &lt;span class="math"&gt;\(\xi_+\)&lt;/span&gt;, &lt;span class="math"&gt;\(\xi_-\)&lt;/span&gt; in the two root case, or just &lt;span class="math"&gt;\(\xi\)&lt;/span&gt; in the repeated root case.&lt;/p&gt;
&lt;p&gt;Most of the qualities above are readily observable in the animations: one or two fixed points, circles mapping to circles, one-to-one, easy to imagine extension to the whole plane.  Conformality is a little harder to see, but if you look closely you can see that the angles at each of the corners in these crazed checkerboards always remain 90°.&lt;/p&gt;
&lt;p&gt;The GIFs were generated using a transform method.  Given a Moebius transformation with two fixed points (we will revisit the single fixed point case shortly), consider the additional Moebius transformation defined by &lt;/p&gt;
&lt;div class="math"&gt;$$ F(z) =  \frac{z - \xi_+}{z - \xi_-}. $$&lt;/div&gt;
&lt;p&gt; This will send &lt;span class="math"&gt;\(\xi_+\)&lt;/span&gt; to &lt;span class="math"&gt;\(0\)&lt;/span&gt;, and  &lt;span class="math"&gt;\(\xi_-\)&lt;/span&gt; to &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;.  We can now construct &lt;/p&gt;
&lt;div class="math"&gt;$$ \widetilde{M} = F \circ  M \circ F^{-1}, $$&lt;/div&gt;
&lt;p&gt; which is itself a Moebius transformation (since the  Moebius transformations are a group under composition) and which will  have fixed points at &lt;span class="math"&gt;\(0\)&lt;/span&gt; and &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;.  We can consider &lt;span class="math"&gt;\(M\)&lt;/span&gt; and &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; to be a transform pair; for any &lt;span class="math"&gt;\(M\)&lt;/span&gt; there is a corresponding &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; with fixed points at &lt;span class="math"&gt;\(0\)&lt;/span&gt; and &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Now it turns out that Moebius transformations with fixed points at both &lt;span class="math"&gt;\(0\)&lt;/span&gt; and &lt;span class="math"&gt;\(\infty\)&lt;/span&gt; reduce to a particularly simple form — that of a single complex multiplication, i.e. just a dilation and/or rotation about the origin of the complex plane.  See Needham for exposition of this.  The elliptic, hyperbolic, and loxodromic classes of Moebius transformations turn out to be those whose corresponding &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; is a pure rotation, pure dilation, or general combination of the two, respectively.&lt;/p&gt;
&lt;p&gt;To generate these GIFs, we decorate the complex plane on the &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; side like a circular checkerboard or dart board, and represent the action of a given class of &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; transformations by rotating it, dilating it, or a combination of both, e.g.:&lt;/p&gt;
&lt;figure&gt;&lt;img src="/images/moebius/pre-elliptic.gif"&gt;&lt;figcaption&gt;elliptic \(\widetilde{M}\)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;img src="/images/moebius/pre-hyperbolic.gif"&gt;&lt;figcaption&gt;hyperbolic \(\widetilde{M}\)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;On the &lt;span class="math"&gt;\(M\)&lt;/span&gt; side, we can pick fixed points &lt;span class="math"&gt;\(\xi_+\)&lt;/span&gt;, &lt;span class="math"&gt;\(\xi_-\)&lt;/span&gt; wherever we like, and then derive the corresponding &lt;span class="math"&gt;\(F\)&lt;/span&gt; as above.  For each frame, we take each point on the &lt;span class="math"&gt;\(M\)&lt;/span&gt; side, map it through &lt;span class="math"&gt;\(F\)&lt;/span&gt; to find the corresponding point on the &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; side, and check that against a dynamic checkerboard model to see if the point should be black or white in this frame.&lt;/p&gt;
&lt;p&gt;Returning to the repeated root, single fixed point case: we treat this similarly, but set &lt;/p&gt;
&lt;div class="math"&gt;$$ F = \frac{1}{z - \xi}, $$&lt;/div&gt;
&lt;p&gt; which sends &lt;span class="math"&gt;\(\xi\)&lt;/span&gt; to &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;.  As before, it turns out that Moebius transformations of this form (repeated fixed point at &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;) reduce to a very simple form: this time, a pure translation.  The parabolic class of Moebius transformations are those whose corresponding &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; transformation is a pure translation.  To illustrate these, we use a translating dynamic checkerboard on the &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; side that looks like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src="/images/moebius/pre-parabolic.gif"&gt;&lt;figcaption&gt;parabolic \(\widetilde{M}\)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;All of this can be done quite succinctly in MATLAB, once it is understood what needs to be done.  Below is the MATLAB snippet which was used to generate these GIFs.  Commenting and uncommenting various lines chooses different &lt;span class="math"&gt;\(F\)&lt;/span&gt; and &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; side checkerboard models, resulting in the different outputs.&lt;/p&gt;
&lt;p&gt;The first few lines create a 512x512 matrix of complex numbers, ranging from -3 to 3 on both the real and imaginary axes, to represent a portion of the complex plane.  This is then pre-mapped through an appropriate &lt;span class="math"&gt;\(F\)&lt;/span&gt;.  The &lt;code&gt;for&lt;/code&gt; loop iterates on each frame.  The dynamic checkerboard result is calculated as the &lt;code&gt;xor&lt;/code&gt; of various versions of functions &lt;code&gt;g1&lt;/code&gt; and &lt;code&gt;g2&lt;/code&gt; operating over the premapped points.  Each frame is downsampled and written to disk as a separate file, then at the end all the frames are stitched into a movie.  I must then have used some non-matlab utility to convert the movies to animated GIFs, but I'm not sure what that was...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;)),:);&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c"&gt;%Z = 1 ./ Z;        % one finite fixed point&lt;/span&gt;
&lt;span class="n"&gt;Z&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c"&gt;% two finite fixed points&lt;/span&gt;

&lt;span class="n"&gt;im&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="n"&gt;g1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="n"&gt;g2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="n"&gt;g1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="c"&gt;% radial, static&lt;/span&gt;
&lt;span class="c"&gt;%    g1 = mod(log(abs(Z))*4+(frame-1)/15,2)&amp;lt;1; % radial, dynamic&lt;/span&gt;
&lt;span class="c"&gt;%    g1 = mod(real(Z)+(frame-1)*.8/30,.8)&amp;lt;.4;  % vertical, dynamic&lt;/span&gt;
&lt;span class="c"&gt;%    g2 = mod(angle(Z), pi/6)&amp;lt;(pi/12);         % circumferential, static&lt;/span&gt;
    &lt;span class="n"&gt;g2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;% circumferential, dynamic&lt;/span&gt;
&lt;span class="c"&gt;%    g2 = mod(imag(Z),.8)&amp;lt;.4;                  % horizontal, static&lt;/span&gt;
    &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;(:,:,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imresize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;g2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bilinear&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;imwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;(:,:,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;frame%.2d.bmp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;immovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mov&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="complex analysis"></category><category term="MATLAB"></category><category term="Moebius transformations"></category><category term="Visual Complex Analysis"></category></entry></feed>