<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>fritzm.github.io</title><link href="http://fritzm.github.io/" rel="alternate"></link><link href="http://fritzm.github.io/feeds/all.atom.xml" rel="self"></link><id>http://fritzm.github.io/</id><updated>2016-06-05T00:00:00-07:00</updated><entry><title>PDP-11/45: CPU Debug II</title><link href="http://fritzm.github.io/cpu-debug-2.html" rel="alternate"></link><published>2016-06-05T00:00:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-06-05:cpu-debug-2.html</id><summary type="html">&lt;p&gt;Received and installed the replacement lamps for the -15V regulators.  Pic below shows what the power supply looks
like with all the lamps functioning.&lt;/p&gt;
&lt;p&gt;Verified backplane DC voltages and ripple currents again, and re-trimmed all the DC regulators.  Verified AC LO and
DC LO de-asserted and free of glitches.  Found some harness wiring mistakes to the DD11 expansion backplane; corrected these.&lt;/p&gt;
&lt;p&gt;Tried some CPU board-swaps looking for a quick win, but broken console behavior didn't change significantly with
different boards.&lt;/p&gt;
&lt;p&gt;Investigated the timing generator board, and found that the crystal oscillator wasn't oscillating.  Tracked this down
to inductor L1 which looked as if it had been partially sheared away from the board at some point during installation/removal/storage.  Repaired this.  Success!  Able to load addresses from the front console now. Switches are mirrored
in the BR when halted in console.&lt;/p&gt;
&lt;p&gt;Address bit 0 seems stuck.  Swapped PDR from spare board back to the original.  Can now examine and modify the
light/switch register, and examine the contents of the MR11 ROM.  Switches are mirrored in the bus register when halted
in console mode, per expectation.&lt;/p&gt;
&lt;p&gt;Jumpered the DD11 expansion backplane back in, and slotted in the MS11-L memory.  Limited success: can modify and
examine memory for example near address &lt;code&gt;001000&lt;/code&gt;, but cannot modify low memory addresses.  In some ranges, can only
modify every other word.  Also, PC seems stuck at &lt;code&gt;022000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At this point, I could really use a KM11 maintenance board set.  These are pretty hard to get a hold of, but a few
folks on the web have built their own reproductions.  I put in a PCB order to ExpressPCB with a KM11 layout by Tom
Uban (desribed &lt;a href="http://www.ubanproductions.com/museum.html"&gt;here&lt;/a&gt;), and also put parts on order to stuff it.&lt;/p&gt;
&lt;p&gt;Also, figuring I'll need to be going deeper into the CPU debug, I found and bought an
&lt;a href="http://www.ebay.com/itm/142004889393"&gt;HP1662A logic analyzer&lt;/a&gt; on eBay, for about the same money as the KM11 PCB and
parts!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/power-lights.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/power-lights.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: Power fixes and CPU debug</title><link href="http://fritzm.github.io/power-fixes.html" rel="alternate"></link><published>2016-05-30T00:00:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-05-30:power-fixes.html</id><summary type="html">&lt;p&gt;Connected up the aforementioned red wire hack to the new power harness, and verified +5V to slots 10 through 15.
Console is no longer all address and data lights on, but basic console load address / examine / deposit operations are
still not working.  A random assortment of address lines seem stuck, different on each power cycle.  About the only
thing that reliably functions from the console is loading the two highest address bits from the switches, immediately
after a reset.  Pulled the floating point unit, un-jumpered the DD11 expansion backplane, and removed all peripherals
except the MR11 diode ROM; same (broken) behavior...&lt;/p&gt;
&lt;p&gt;Scoped all the DC voltages, and did not notice any glitches.  Pulled the H742s for some bench work: verified AC LO and
DC LO signaling on both units, replaced a broken Mate-n-Lok connector on one of the units, blew out dust from all the 5V
regulators and replaced their indicator bulbs with modern equivalent (CM7381). Sourced and put on order a modern
equivalent (OL-6003BP) for the indicator bulbs on the -15V regulators.&lt;/p&gt;
&lt;p&gt;Next steps will be to verify various Unibus signals on the backplane, then maybe play some swap games with CPU card
spares to see if I can get closer to a working console as a starting point.  All I have time for this weekend, though; sorry nothing new to see so no new pictures this time!&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: Initial Power On!</title><link href="http://fritzm.github.io/initial-power-on.html" rel="alternate"></link><published>2016-05-08T00:00:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-05-08:initial-power-on.html</id><summary type="html">&lt;p&gt;Beeped out the new harness to check for shorts or incorrect pins, then plugged in just the H742s and fired it up.  All
the DC regulator modules seem to be working, and I was able to trim them up to nominal voltages at the CPU end of the
harness.  The indicator lamps on all but one of the DC regulators seem to be burned out, though, so I put some new lamps
on order (at last for the +5V regulators; a modern equivalent for the -15V regulators is tougher to find).&lt;/p&gt;
&lt;p&gt;Given that success, I plugged in the CPU side of the harness, took a deep breath, and powered on!  Hmmm.  No detonations
or smoke, but all data/address/mode lights lit (see below), which is not right...  Front panel lamp test and data
address mode switches and indicators are working though at least.&lt;/p&gt;
&lt;p&gt;Some investigation on the backplane turned up no +5V to slots 10 though 15, which could be part of the problem.  Ah,
that's what the mysterious clipped red wire soldered to the backplane might have been about (visible in the top right
&lt;a href="http://fritzm.github.io/images/pdp11/kb11a-backplane.jpg"&gt;here&lt;/a&gt;...)  Sure enough, some inspection shows the corresponding trace on
the backplane looks burnt!  I could hack this red wire into my new harness I guess, but I'd rather remove it and try to
repair the board trace with a shunt.  So the backplane will have to come out.  I guess that's what I get for not
investigating the weird red wire and for not beeping out the power distribution on the backplane before mounting
and populating it...&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/initial-power-on.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/initial-power-on.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: Power Harness, continued</title><link href="http://fritzm.github.io/power-harness-2.html" rel="alternate"></link><published>2016-04-23T00:00:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-04-23:power-harness-2.html</id><summary type="html">&lt;p&gt;Moved the power modules and partial harness back over to the racks today, got everything remounted, finished and
dressed the backplane terminations, and completed the inter-H742 connections.&lt;/p&gt;
&lt;p&gt;I did not do the runs for the backplane memory to the lower H742, as I do not have any backplane memory.  I probably
won't ever have any, either: these memory options are specialized to the 11/45, are quite rare, and only cover part of
the available address space.  Additionally, they would require me to track down the details of a backplane ECO to do
the corresponding parts of the harness correctly.  The core and MOS memory that I do actually have are all system-unit
options anyway.&lt;/p&gt;
&lt;p&gt;Here are some pics of the in-rack wiring in progress, and a couple views of the finished harness.  If you add up
the capacity of the DC modules, you'll see that an 11/45 like mine (with floating point) is provisioned with +5V at 100
[sic] amps, and -15V at 20 amps.  That's no joke of a power supply...&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/harness-progress.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/harness-progress.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/harness-complete.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/harness-complete.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/power-supplies.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/power-supplies.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: Power Harness</title><link href="http://fritzm.github.io/power-harness.html" rel="alternate"></link><published>2016-04-17T00:00:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-04-17:power-harness.html</id><summary type="html">&lt;p&gt;The main bit I'm missing from the 11/45 is the power distribution harness; somewhere over the years this was
misplaced, or maybe I accidentally gave it away along with some excess 11/40 parts.  In any case, I haven't had any
luck tracking one of these down (made extra difficult by the fact that my 11/45 is an early model which requires a
slightly different harness than more recent models), so I'll have to build one myself from scratch.&lt;/p&gt;
&lt;p&gt;Luckily the required harness is pretty well documented in the engineering print sets.  The crimp pins are standard
Mate-n-Lok still in production.  Some of the connectors are out of production, but they haven't been too hard to
track down.&lt;/p&gt;
&lt;p&gt;Here are some pictures of the amassed wire of appropriate guages and colors, connectors, crimp pins, and the start of
the harness build on the bench:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/harness-parts.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/harness-parts.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/harness-bench.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/harness-bench.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: Some parts from eBay</title><link href="http://fritzm.github.io/ebay-parts.html" rel="alternate"></link><published>2016-04-09T11:25:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-04-09:ebay-parts.html</id><summary type="html">&lt;p&gt;I've been keeping an eye on eBay and have collected a few more goodies: a DD11-D nine-slot expansion backplane, a fully
populated (128K x 18bit) MS11-L MOS memory board, and a couple of replacement BC08-R cables for connecting the console
to the CPU cards.  The MS11-L is a bit of a luxury; I am figuring it will be easier to deal with during bringup than
the core memory systems I have on hand.  It will also be nice to run with a full address space.&lt;/p&gt;
&lt;p&gt;Below is an updated shot of the CPU chassis with the expansion backplane installed, populated with bus jumpers,
terminators, grant continuity cards, the MS11-L memory, a DL11 serial interface, and an MR11-DB boostrap ROM.  I've gone
ahead and slotted in the FPU in the first four slots, since the cleaned and refurbished CPU cabinet is probably the
safest place to store them now.  Console cables are also installed:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/boards-in-chassis-2.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/boards-in-chassis-2.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The MR11 ROM is an interesting bit, and probably worth a comment.  This is a 32-word diode-matrix ROM card.  The bits
are physically laid out on the card (see pictures below); where there is a diode, there is a logical 1 bit and where
there is the absence of a diode there is a logical 0 bit.  Typically the matrix would be loaded with a bootstrap program,
to save the operator from having to toggle it in from the console on each boot.&lt;/p&gt;
&lt;p&gt;The program could be modified by pysically adding or removing diodes in the matrix.  My card has had such a mod; there
is a handwritten note attached from some engineer describing this.  The mod customizes the bootstrap to always load
from an RK disk unit, to avoid having to toggle in the device address at boot.  I will probably revert this mod because
I like having things in fairly stock/usual condition.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/mr11-with-note.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/mr11-with-note.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/mr11-bare.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/mr11-bare.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For fun, here's the source listing of the stock bootstrap.  You can match the octal digits of the machine code against
the diodes in the ROM above (low word addresses at the top of the matrix, and least-significant-bits on the left).&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;              &lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;REGISTER&lt;/span&gt; &lt;span class="nt"&gt;ASSIGNMENTS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
       &lt;span class="nt"&gt;000000&lt;/span&gt; &lt;span class="nt"&gt;R0&lt;/span&gt;&lt;span class="o"&gt;=%&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;
       &lt;span class="nt"&gt;000001&lt;/span&gt; &lt;span class="nt"&gt;R1&lt;/span&gt;&lt;span class="o"&gt;=%&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;
              &lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;173100&lt;/span&gt; &lt;span class="nt"&gt;013701&lt;/span&gt;         &lt;span class="nt"&gt;MOV&lt;/span&gt;     &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nn"&gt;#177570&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;R1&lt;/span&gt;     &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;READ&lt;/span&gt; &lt;span class="nt"&gt;SWITCH&lt;/span&gt; &lt;span class="nt"&gt;REG&lt;/span&gt; &lt;span class="nt"&gt;FOR&lt;/span&gt; &lt;span class="o"&gt;....&lt;/span&gt;
       &lt;span class="nt"&gt;177570&lt;/span&gt;
&lt;span class="nt"&gt;173104&lt;/span&gt; &lt;span class="nt"&gt;000005&lt;/span&gt; &lt;span class="nt"&gt;BEGIN&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="nt"&gt;RESET&lt;/span&gt;                   &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;FORCE&lt;/span&gt; &lt;span class="nt"&gt;CLEAR&lt;/span&gt; &lt;span class="nt"&gt;IF&lt;/span&gt; &lt;span class="nt"&gt;RETRY&lt;/span&gt;
&lt;span class="nt"&gt;173106&lt;/span&gt; &lt;span class="nt"&gt;010100&lt;/span&gt;         &lt;span class="nt"&gt;MOV&lt;/span&gt;     &lt;span class="nt"&gt;R1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;R0&lt;/span&gt;           &lt;span class="o"&gt;;...&lt;/span&gt;&lt;span class="nc"&gt;.DEVICE&lt;/span&gt; &lt;span class="nt"&gt;WC&lt;/span&gt; &lt;span class="nt"&gt;ADDRESS&lt;/span&gt;
&lt;span class="nt"&gt;173110&lt;/span&gt; &lt;span class="nt"&gt;012710&lt;/span&gt;         &lt;span class="nt"&gt;MOV&lt;/span&gt;     &lt;span class="nn"&gt;#-256&lt;/span&gt;&lt;span class="o"&gt;.,&lt;/span&gt;&lt;span class="k"&gt;@R0&lt;/span&gt;      &lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;SET&lt;/span&gt; &lt;span class="nt"&gt;TO&lt;/span&gt; &lt;span class="nt"&gt;READ&lt;/span&gt; &lt;span class="nt"&gt;256&lt;/span&gt; &lt;span class="nt"&gt;WORDS&lt;/span&gt;
       &lt;span class="nt"&gt;177400&lt;/span&gt;
&lt;span class="nt"&gt;173114&lt;/span&gt; &lt;span class="nt"&gt;020027&lt;/span&gt;         &lt;span class="nt"&gt;CMP&lt;/span&gt;     &lt;span class="nt"&gt;R0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;#177344&lt;/span&gt;      &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;IS&lt;/span&gt; &lt;span class="nt"&gt;IT&lt;/span&gt; &lt;span class="nt"&gt;DECTAPE&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
       &lt;span class="nt"&gt;177344&lt;/span&gt;
&lt;span class="nt"&gt;173120&lt;/span&gt; &lt;span class="nt"&gt;001007&lt;/span&gt;         &lt;span class="nt"&gt;BNE&lt;/span&gt;     &lt;span class="nt"&gt;START&lt;/span&gt;           &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;NO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;GO&lt;/span&gt; &lt;span class="nt"&gt;TO&lt;/span&gt; &lt;span class="nt"&gt;START&lt;/span&gt;
&lt;span class="nt"&gt;173122&lt;/span&gt; &lt;span class="nt"&gt;012740&lt;/span&gt;         &lt;span class="nt"&gt;MOV&lt;/span&gt;     &lt;span class="nn"&gt;#4002&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;-&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;R0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;     &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;YES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;MOVE&lt;/span&gt; &lt;span class="nt"&gt;TAPE&lt;/span&gt; &lt;span class="nt"&gt;TO&lt;/span&gt; &lt;span class="nt"&gt;FRONT&lt;/span&gt;
       &lt;span class="nt"&gt;004002&lt;/span&gt;
&lt;span class="nt"&gt;173126&lt;/span&gt; &lt;span class="nt"&gt;005710&lt;/span&gt;         &lt;span class="nt"&gt;TST&lt;/span&gt;     &lt;span class="k"&gt;@R0&lt;/span&gt;             &lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;WAIT&lt;/span&gt; &lt;span class="nt"&gt;FOR&lt;/span&gt; &lt;span class="nt"&gt;ERROR&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="nt"&gt;173130&lt;/span&gt; &lt;span class="nt"&gt;100376&lt;/span&gt;         &lt;span class="nt"&gt;BPL&lt;/span&gt;     &lt;span class="nc"&gt;.-2&lt;/span&gt;
&lt;span class="nt"&gt;173132&lt;/span&gt; &lt;span class="nt"&gt;005740&lt;/span&gt;         &lt;span class="nt"&gt;TST&lt;/span&gt;     &lt;span class="nt"&gt;-&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;R0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;           &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;IS&lt;/span&gt; &lt;span class="nt"&gt;IT&lt;/span&gt; &lt;span class="nt"&gt;ENDZONE&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="nt"&gt;173134&lt;/span&gt; &lt;span class="nt"&gt;100363&lt;/span&gt;         &lt;span class="nt"&gt;BPL&lt;/span&gt;     &lt;span class="nt"&gt;BEGIN&lt;/span&gt;           &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;NO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;TRY&lt;/span&gt; &lt;span class="nt"&gt;AGAIN&lt;/span&gt;
&lt;span class="nt"&gt;173136&lt;/span&gt; &lt;span class="nt"&gt;022020&lt;/span&gt;         &lt;span class="nt"&gt;CMP&lt;/span&gt;     &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;R0&lt;/span&gt;&lt;span class="o"&gt;)+,(&lt;/span&gt;&lt;span class="nt"&gt;R0&lt;/span&gt;&lt;span class="o"&gt;)+&lt;/span&gt;     &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;ADJUST&lt;/span&gt; &lt;span class="nt"&gt;POINTER&lt;/span&gt;
&lt;span class="nt"&gt;173140&lt;/span&gt; &lt;span class="nt"&gt;012740&lt;/span&gt; &lt;span class="nt"&gt;START&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="nt"&gt;MOV&lt;/span&gt;     &lt;span class="nn"&gt;#5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;-&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;R0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;        &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;NOW&lt;/span&gt; &lt;span class="nt"&gt;START&lt;/span&gt; &lt;span class="nt"&gt;ACTUAL&lt;/span&gt; &lt;span class="nt"&gt;READ&lt;/span&gt;
       &lt;span class="nt"&gt;000005&lt;/span&gt;
&lt;span class="nt"&gt;173144&lt;/span&gt; &lt;span class="nt"&gt;105710&lt;/span&gt;         &lt;span class="nt"&gt;TSTB&lt;/span&gt;    &lt;span class="k"&gt;@R0&lt;/span&gt;             &lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;WAIT&lt;/span&gt; &lt;span class="nt"&gt;FOR&lt;/span&gt; &lt;span class="nt"&gt;DONE&lt;/span&gt;
&lt;span class="nt"&gt;173146&lt;/span&gt; &lt;span class="nt"&gt;100376&lt;/span&gt;         &lt;span class="nt"&gt;BPL&lt;/span&gt;     &lt;span class="nc"&gt;.-2&lt;/span&gt;
&lt;span class="nt"&gt;173150&lt;/span&gt; &lt;span class="nt"&gt;005710&lt;/span&gt;         &lt;span class="nt"&gt;TST&lt;/span&gt;     &lt;span class="k"&gt;@R0&lt;/span&gt;             &lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;ERROR&lt;/span&gt; &lt;span class="nt"&gt;ENCOUNTERED&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="nt"&gt;173152&lt;/span&gt; &lt;span class="nt"&gt;100754&lt;/span&gt;         &lt;span class="nt"&gt;BMI&lt;/span&gt;     &lt;span class="nt"&gt;BEGIN&lt;/span&gt;           &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;IF&lt;/span&gt; &lt;span class="nt"&gt;SO&lt;/span&gt; &lt;span class="nt"&gt;START&lt;/span&gt; &lt;span class="nt"&gt;OVER&lt;/span&gt;
&lt;span class="nt"&gt;173154&lt;/span&gt; &lt;span class="nt"&gt;105010&lt;/span&gt;         &lt;span class="nt"&gt;CLRB&lt;/span&gt;    &lt;span class="k"&gt;@R0&lt;/span&gt;             &lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;FOR&lt;/span&gt; &lt;span class="nt"&gt;DECTAPE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;STOP&lt;/span&gt; &lt;span class="nt"&gt;TRANSPORT&lt;/span&gt;
&lt;span class="nt"&gt;173156&lt;/span&gt; &lt;span class="nt"&gt;000137&lt;/span&gt;         &lt;span class="nt"&gt;JMP&lt;/span&gt;     &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nn"&gt;#0&lt;/span&gt;             &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;GO&lt;/span&gt; &lt;span class="nt"&gt;TO&lt;/span&gt; &lt;span class="nt"&gt;ROUTINE&lt;/span&gt; &lt;span class="nt"&gt;LOADED&lt;/span&gt;
       &lt;span class="nt"&gt;000000&lt;/span&gt;
       &lt;span class="nt"&gt;000001&lt;/span&gt;         &lt;span class="nc"&gt;.END&lt;/span&gt;

&lt;span class="nt"&gt;BEGIN&lt;/span&gt;      &lt;span class="nt"&gt;000004R&lt;/span&gt;         &lt;span class="nt"&gt;R0&lt;/span&gt;    &lt;span class="o"&gt;=%&lt;/span&gt;&lt;span class="nt"&gt;000000&lt;/span&gt;      &lt;span class="nt"&gt;R1&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;2000001&lt;/span&gt;
&lt;span class="nt"&gt;START&lt;/span&gt;      &lt;span class="nt"&gt;000040R&lt;/span&gt;         &lt;span class="o"&gt;.&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;000062R&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Hmmm, the Pygments syntax hightlighting package used by my blog generator doesn't seem to grok MACRO-11; may have to
do something about that...&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: VT52</title><link href="http://fritzm.github.io/vt52.html" rel="alternate"></link><published>2016-01-03T20:17:00-08:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2016-01-03:vt52.html</id><summary type="html">&lt;p&gt;Spend some time reviving a VT52 that I intend to use with the PDP-11.  This was a pretty nice eBay find.  There was some
oxidation and flakiness with the connectors to the chargen ROM daughter card (I remember this being typical
of VT52s even back in the day).  A little more difficult to track down were some flaky solder joints around the clock
chip.  But, everything else seems to be in pretty good shape and its working well now!  Here it is hooked up to a linux
VM on my macbook, compiling some LSST code to generate some output as a test drive:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/vt52.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/vt52.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Man, seeing that funky font again, with its non-descending-descenders, is really great!  Surprisingly, it doesn't seem
to be available in digital format anywhere, unlike the later VT100 fonts, etc.  Try as I might, I couldn't seem to find
the chargen ROM listing in any of the DEC documentation archives, either.&lt;/p&gt;
&lt;p&gt;Well, I do have a Digilent FPGA eval card and some level conversion chips laying around, so as a holiday hack project
I put together a quick ROM scanner in Verlog, interfaced it to the VT52 chargen on a breadboard, and scanned out the
contents.  Here's a picture of the scanner in action, and the produced output:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/rom-scanner.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/rom-scanner.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The yellow-ish board on the right is the VT52 chargen.  The Verilog source for the scanner, the scanned data, and some
preliminary attempts to convert the data to a few modern font formats are available on my github over at
&lt;a href="https://github.com/fritzm/vt52"&gt;https://github.com/fritzm/vt52&lt;/a&gt;.  I need to learn some more about font formats to make some better font files; if I do
I will update that repo.  Any help from fontophiles gladly accepted!&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: CPU Backplane and logic</title><link href="http://fritzm.github.io/backplane-and-logic.html" rel="alternate"></link><published>2015-07-03T14:56:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2015-07-03:backplane-and-logic.html</id><summary type="html">&lt;p&gt;Mounted the CPU backplane, and slotted in the CPU and MMU logic cards.  The empty slots on the right are for the FPU -- I have those on hand but figure I'll wait to slot them until I've got the basic CPU up and running.&lt;/p&gt;
&lt;p&gt;One kind of interesting thing: the logic boards were stored vertically for several decades, and on some of the cards with plastic ribbon-cable connectors the plastic seems to have flaked and shed and fallen down the boards.  The flakey substance then grew some impressive crystals between some of the solder traces.  Scrubbed these out with some anhydrous IPA.&lt;/p&gt;
&lt;p&gt;A tip copied from a fellow restorer: Alconox detergent for removing grime from various plastic components.  Parts soaked overnight come out looking nearly new (here you can see the cleaned plastic card guides).&lt;/p&gt;
&lt;p&gt;Also pictured here are the characteristic bloody knuckles that are obtained whenever wrestling with PDP backplanes, logic cards, and terminators in close confines.  That really takes you back...&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/boards-in-chassis.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/boards-in-chassis.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/board-with-crystals.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/board-with-crystals.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/crystals.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/crystals.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/knuckles.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/knuckles.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: H742s and front panel</title><link href="http://fritzm.github.io/panel-and-742s.html" rel="alternate"></link><published>2015-06-21T18:14:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2015-06-21:panel-and-742s.html</id><summary type="html">&lt;p&gt;The H742 supplies are now back together, mounted in the cabinet, and wired through to the 861.  I've powered them up and run them for minutes at a time (without any DC regulator loads) and there have been no surprise detonations...&lt;/p&gt;
&lt;p&gt;The repainted cabinet side door has also been remounted.&lt;/p&gt;
&lt;p&gt;Spent some time on the front panel as well.  Removed the tubular lock and took a trip to the local locksmith to have a new key made up.  Replaced all the incandescent indicator lamps with the closest modern equivalent.  Panel is now remounted and it's starting to look like a real '11!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/742s-mounted.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/742s-mounted.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/front-panel.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/front-panel.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: AC power and cooling</title><link href="http://fritzm.github.io/fans-and-h742s.html" rel="alternate"></link><published>2015-06-07T14:15:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2015-06-07:fans-and-h742s.html</id><summary type="html">&lt;p&gt;Spent a lot of time over a couple weekends cleaning and reconditioning all the muffin cooling fans for the CPU cabinet and power supplies.  As you can see in the photo below, there are a lot of these!  All reassembled now, and wired along with the back-of-cabinet power distribution board.  Also did a clean on the big box fan at the top of the rack, not seen here.&lt;/p&gt;
&lt;p&gt;I have also completely torn down the H742s to give them a thorough clean, touch up a few last corrosion spots, and replace the failing neon indicators.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/chassis-with-fans.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/chassis-with-fans.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/742-rebuild.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/742-rebuild.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: H742 power control boards</title><link href="http://fritzm.github.io/power-controllers.html" rel="alternate"></link><published>2015-05-23T16:30:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2015-05-23:power-controllers.html</id><summary type="html">&lt;p&gt;Found a little time to clean up and go through the power control boards for the H742 supplies.  They are looking pretty good.  Even the big electrolytics seem fine on first look.  These things were built with very high quality components, and they really seem to last and last.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/pwr-ctrls.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/pwr-ctrls.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: Teardown and corrosion remediation</title><link href="http://fritzm.github.io/corrosion.html" rel="alternate"></link><published>2015-04-11T18:45:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2015-04-11:corrosion.html</id><summary type="html">&lt;p&gt;Had a little more time to work on the PDP-11 this weekend.  Mostly going after some corrosion on the CPU cabinet and H742 power supplies.  Tore these down, sanded down the corroded bits, then hit with a satin finish Rustoleum rattle-can which dries to a reasonable approximation of the original powder-coat.&lt;/p&gt;
&lt;p&gt;Neon indicators on the H742s are dim and flickery, so ordered some replacements for these, too.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/h742-teardown.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/h742-teardown.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/h742-corrosion.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/h742-corrosion.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/cpu-cabinet.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/cpu-cabinet.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: 861 AC power control</title><link href="http://fritzm.github.io/861.html" rel="alternate"></link><published>2015-03-29T10:35:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2015-03-29:861.html</id><summary type="html">&lt;p&gt;Well, might as well start at the beginning with the AC power system, so here's the 861 power control.  In very good shape for some 40 year old kit!  The neon indicator lamps have gone, so I sourced the modern equivalent and put them on order.  Everything else is tight and clean:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/861.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/861.jpg'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>PDP-11/45: Begin Again</title><link href="http://fritzm.github.io/begin-again.html" rel="alternate"></link><published>2015-03-15T18:45:00-07:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2015-03-15:begin-again.html</id><summary type="html">&lt;p&gt;Back in the mid/late '80s, when I was hanging around CMU, a computer club member introduced me to the club's nearly forgotten hardware lab.  It was still stuffed with remnants of the earlier time-sharing age, including two or three full-cabinet PDP-11 systems with names like "Banshee" and "Centaur".  I thought these were the coolest -- CPUs you could see inside, and hack with a soldering iron and a wire wrap gun.  Real front panels with lights and toggles, and machine language programming as a physical activity.  For a kid fascinated with computers, it was great.  You couldn't get closer to the metal; you could quite literally get your head inside these machines.&lt;/p&gt;
&lt;p&gt;I began spending off hours in the lab, puttering with the 11s and getting to know them.  Eventually, the club decided it was time to clean house and remove all of the older equipment.  Most stuff was scheduled to be hauled away to the dump, but I was welcome to anything I wanted to haul away myself in advance.  So I bothered some friends with a car, disassembled one of the 11/45s there ("Banshee" I believe) which seemed like the nicest thing, and hauled it off to my off-campus house.  There it resided in the basement with many other oddments for some years.&lt;/p&gt;
&lt;p&gt;Eventually, I ended up moving out to CA, and after some time the 11/45 CPU was disassembled and packed into moving boxes for the west coast as practically as possible, leaving all the bulkier parts behind.&lt;/p&gt;
&lt;p&gt;After a couple of years in CA, I happened on a decomissioned two-rack 11/40 system at Stanford, essentially free for the effort of hauling.  This had most of the missing cabinetry, power supplies, and peripherals needed to reconstruct the 11/45!  So I procurred this and added it to a growing west coast equipment stash.  And then real-life set in -- job changes, house moves, raising a kid...  Through all of that I held on to all the parts, vowing to "get to it someday".  I would pick through the stuff from time to time over the years, but never had the time to take the project very far.&lt;/p&gt;
&lt;p&gt;Well, now "someday" is here!  The kid is off to college and I've moved house once again, but this time I reserved some working space for the project and pulled all the parts so they are together and accessible.  So here we go...&lt;/p&gt;
&lt;p&gt;Here are a some pics from the first weekend: the two H960 racks that are the bones of the whole thing, some glamour shots of the processor backplane and the RK11-C disk controller, and my buddy Chris helping to remount the RK05 drives on their rails temporarily to keep them off the floor and out of harm's way:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fritzm.github.io/images/pdp11/racks.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/racks.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/kb11a-backplane.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/kb11a-backplane.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/rk11c.jpg"&gt;&lt;img class='image-process-thumb' src='/images/pdp11/rk11c.jpg'/&gt;&lt;/a&gt;
&lt;a href="http://fritzm.github.io/images/pdp11/rk05-help.png"&gt;&lt;img src='/images/pdp11/rk05-help.png'/&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Retro-Computing"></category><category term="PDP-11"></category></entry><entry><title>three.js and JSFiddle</title><link href="http://fritzm.github.io/jsfiddle-test.html" rel="alternate"></link><published>2014-12-02T20:08:00-08:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2014-12-02:jsfiddle-test.html</id><summary type="html">&lt;p&gt;Here's a small web toy, as a test of embedding a client-side visualisation in this blog.  The toy written in JavaScript using the &lt;a href="http://threejs.org/"&gt;Three.js&lt;/a&gt; 3D graphics library, and is hosted at JSFiddle.net.  If you click the "Edit in JSFiddle" link, you'll go off site to a full multi-pane view of the toy, where you can inspect and modify and play with the various parts of the HTML, CSS, and JavaScript.&lt;/p&gt;
&lt;div style="text-align: center"&gt;
&lt;iframe width="501" height="340" src="http://jsfiddle.net/fritzm/5cyVe/embedded/result/#result" allowfullscreen="allowfullscreen" frameborder="0"&gt;&lt;/iframe&gt;
&lt;/div&gt;</summary><category term="Three.js"></category><category term="JSFiddle"></category></entry><entry><title>Moebious transformation animated GIFs</title><link href="http://fritzm.github.io/moebius.html" rel="alternate"></link><published>2014-12-01T12:45:00-08:00</published><author><name>Fritz Mueller</name></author><id>tag:fritzm.github.io,2014-12-01:moebius.html</id><summary type="html">&lt;p&gt;Here are some animated GIFs that I created a few years ago with MATLAB.  These characterize the action of the four classes of Moebius transformations, mapping the complex plane to itself.  They were inspired by the illustrations and analysis in a section of Tristan Needham's excellent book &lt;a href="http://books.google.com/books?vid=ISBN0198534469"&gt;&lt;em&gt;Visual Complex Analysis&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;figure&gt;&lt;img src="/images/moebius/elliptic.gif"&gt;&lt;figcaption&gt;elliptic&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;img src="/images/moebius/hyperbolic.gif"&gt;&lt;figcaption&gt;hyperbolic&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;img src="/images/moebius/loxodromic.gif"&gt;&lt;figcaption&gt;loxodromic&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;img src="/images/moebius/parabolic.gif"&gt;&lt;figcaption&gt;parabolic&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;So what's it all about?  A Moebius transformation is a mapping on the complex numbers of the form &lt;/p&gt;
&lt;div class="math"&gt;$$ M(z) = \frac{az + b}{cz + d}, $$&lt;/div&gt;
&lt;p&gt; where &lt;span class="math"&gt;\(a, b, c, d\)&lt;/span&gt; are complex constants.  Moebius tranformations have many nice features: they are one-to-one and onto on the complex plane (extended with the addition of the "point at &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;"), they form a group under composition, they are conformal (angle preserving).  Interestingly, though conformality only implies that they map infinitesimal circles to other infinitesimal circles, Moebius transformations actually map circles of &lt;em&gt;any&lt;/em&gt; size in the complex plane to other circles in the plane.  For a really nice exposition and proofs of these qualities, see Needham.&lt;/p&gt;
&lt;p&gt;Fixed points on the plane under a Moebius transform will simply be solutions of &lt;/p&gt;
&lt;div class="math"&gt;$$ z = \frac{az+b}{cz+d}, $$&lt;/div&gt;
&lt;p&gt; which is just quadratic in &lt;span class="math"&gt;\(z\)&lt;/span&gt;.  So a (non-identity) Moebius transform will have at most two fixed points, or one when there is a repeated root.  Following Needham, for the remainder of this discussion we'll refer to the fixed points of a given Moebius transformation as &lt;span class="math"&gt;\(\xi_+\)&lt;/span&gt;, &lt;span class="math"&gt;\(\xi_-\)&lt;/span&gt; in the two root case, or just &lt;span class="math"&gt;\(\xi\)&lt;/span&gt; in the repeated root case.&lt;/p&gt;
&lt;p&gt;Most of the qualities above are readily observable in the animations: one or two fixed points, circles mapping to circles, one-to-one, easy to imagine extension to the whole plane.  Conformality is a little harder to see, but if you look closely you can see that the angles at each of the corners in these crazed checkerboards always remain 90°.&lt;/p&gt;
&lt;p&gt;The GIFs were generated using a transform method.  Given a Moebius transformation with two fixed points (we will revisit the single fixed point case shortly), consider the additional Moebius transformation defined by &lt;/p&gt;
&lt;div class="math"&gt;$$ F(z) =  \frac{z - \xi_+}{z - \xi_-}. $$&lt;/div&gt;
&lt;p&gt; This will send &lt;span class="math"&gt;\(\xi_+\)&lt;/span&gt; to &lt;span class="math"&gt;\(0\)&lt;/span&gt;, and  &lt;span class="math"&gt;\(\xi_-\)&lt;/span&gt; to &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;.  We can now construct &lt;/p&gt;
&lt;div class="math"&gt;$$ \widetilde{M} = F \circ  M \circ F^{-1}, $$&lt;/div&gt;
&lt;p&gt; which is itself a Moebius transformation (since the  Moebius transformations are a group under composition) and which will  have fixed points at &lt;span class="math"&gt;\(0\)&lt;/span&gt; and &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;.  We can consider &lt;span class="math"&gt;\(M\)&lt;/span&gt; and &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; to be a transform pair; for any &lt;span class="math"&gt;\(M\)&lt;/span&gt; there is a corresponding &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; with fixed points at &lt;span class="math"&gt;\(0\)&lt;/span&gt; and &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Now it turns out that Moebius transformations with fixed points at both &lt;span class="math"&gt;\(0\)&lt;/span&gt; and &lt;span class="math"&gt;\(\infty\)&lt;/span&gt; reduce to a particularly simple form — that of a single complex multiplication, i.e. just a dilation and/or rotation about the origin of the complex plane.  See Needham for exposition of this.  The elliptic, hyperbolic, and loxodromic classes of Moebius transformations turn out to be those whose corresponding &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; is a pure rotation, pure dilation, or general combination of the two, respectively.&lt;/p&gt;
&lt;p&gt;To generate these GIFs, we decorate the complex plane on the &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; side like a circular checkerboard or dart board, and represent the action of a given class of &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; transformations by rotating it, dilating it, or a combination of both, e.g.:&lt;/p&gt;
&lt;figure&gt;&lt;img src="/images/moebius/pre-elliptic.gif"&gt;&lt;figcaption&gt;elliptic \(\widetilde{M}\)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;img src="/images/moebius/pre-hyperbolic.gif"&gt;&lt;figcaption&gt;hyperbolic \(\widetilde{M}\)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;On the &lt;span class="math"&gt;\(M\)&lt;/span&gt; side, we can pick fixed points &lt;span class="math"&gt;\(\xi_+\)&lt;/span&gt;, &lt;span class="math"&gt;\(\xi_-\)&lt;/span&gt; wherever we like, and then derive the corresponding &lt;span class="math"&gt;\(F\)&lt;/span&gt; as above.  For each frame, we take each point on the &lt;span class="math"&gt;\(M\)&lt;/span&gt; side, map it through &lt;span class="math"&gt;\(F\)&lt;/span&gt; to find the corresponding point on the &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; side, and check that against a dynamic checkerboard model to see if the point should be black or white in this frame.&lt;/p&gt;
&lt;p&gt;Returning to the repeated root, single fixed point case: we treat this similarly, but set &lt;/p&gt;
&lt;div class="math"&gt;$$ F = \frac{1}{z - \xi}, $$&lt;/div&gt;
&lt;p&gt; which sends &lt;span class="math"&gt;\(\xi\)&lt;/span&gt; to &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;.  As before, it turns out that Moebius transformations of this form (repeated fixed point at &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;) reduce to a very simple form: this time, a pure translation.  The parabolic class of Moebius transformations are those whose corresponding &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; transformation is a pure translation.  To illustrate these, we use a translating dynamic checkerboard on the &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; side that looks like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src="/images/moebius/pre-parabolic.gif"&gt;&lt;figcaption&gt;parabolic \(\widetilde{M}\)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;All of this can be done quite succinctly in MATLAB, once it is understood what needs to be done.  Below is the MATLAB snippet which was used to generate these GIFs.  Commenting and uncommenting various lines chooses different &lt;span class="math"&gt;\(F\)&lt;/span&gt; and &lt;span class="math"&gt;\(\widetilde{M}\)&lt;/span&gt; side checkerboard models, resulting in the different outputs.&lt;/p&gt;
&lt;p&gt;The first few lines create a 512x512 matrix of complex numbers, ranging from -3 to 3 on both the real and imaginary axes, to represent a portion of the complex plane.  This is then pre-mapped through an appropriate &lt;span class="math"&gt;\(F\)&lt;/span&gt;.  The &lt;code&gt;for&lt;/code&gt; loop iterates on each frame.  The dynamic checkerboard result is calculated as the &lt;code&gt;xor&lt;/code&gt; of various versions of functions &lt;code&gt;g1&lt;/code&gt; and &lt;code&gt;g2&lt;/code&gt; operating over the premapped points.  Each frame is downsampled and written to disk as a separate file, then at the end all the frames are stitched into a movie.  I must then have used some non-matlab utility to convert the movies to animated GIFs, but I'm not sure what that was...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;)),:);&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c"&gt;%Z = 1 ./ Z;        % one finite fixed point&lt;/span&gt;
&lt;span class="n"&gt;Z&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c"&gt;% two finite fixed points&lt;/span&gt;

&lt;span class="n"&gt;im&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="n"&gt;g1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="n"&gt;g2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="n"&gt;g1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="c"&gt;% radial, static&lt;/span&gt;
&lt;span class="c"&gt;%    g1 = mod(log(abs(Z))*4+(frame-1)/15,2)&amp;lt;1; % radial, dynamic&lt;/span&gt;
&lt;span class="c"&gt;%    g1 = mod(real(Z)+(frame-1)*.8/30,.8)&amp;lt;.4;  % vertical, dynamic&lt;/span&gt;
&lt;span class="c"&gt;%    g2 = mod(angle(Z), pi/6)&amp;lt;(pi/12);         % circumferential, static&lt;/span&gt;
    &lt;span class="n"&gt;g2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;% circumferential, dynamic&lt;/span&gt;
&lt;span class="c"&gt;%    g2 = mod(imag(Z),.8)&amp;lt;.4;                  % horizontal, static&lt;/span&gt;
    &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;(:,:,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imresize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;g2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bilinear&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;imwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;(:,:,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;frame%.2d.bmp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;immovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mov&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="complex analysis"></category><category term="MATLAB"></category><category term="Moebius transformations"></category><category term="Visual Complex Analysis"></category></entry></feed>